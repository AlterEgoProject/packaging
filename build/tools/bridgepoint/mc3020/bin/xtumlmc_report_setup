#!perl -w
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# (C) Copyright Mentor Graphics Corporation  (2004-2005)               #
# All rights reserved.                                                 #
#______________________________________________________________________#

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# For help by user...
my $help_info = <<'##done##';
# Title:               Report Cleanup/collector                            #
# File Name:           xtumlmc_report_setup.pl                             #
#                                                                          #
# Protocol -                                                               #
#   $ rox_report_setup.pl -c dir -e (-d|-vd) dir2                          #
#     -c  = collect all the log files in dir2 into dir (optional)          #
#     -e = erase all log files in directory specified in -d|-vd (optional) #
#     -d = dated dir reports are in                                        #
#     -vd = dated dir/variation the reports are in                         #
#     -h  = bring up this screen                                           #
#                                                                          #
#                                                                          #
# Example                                                                  #
# rox_report_setup.pl -d 050801 -c validrpts                               #
# -collects all reports from August 1, 2005 into the validrpts directory   #
# Abstract -                                                               #
#   This file generates reports from tests.                                #
#
# -- End information for help
##done##
#                                                                      #
# Notes -                                                              #
#   Requires Perl.                                                     #
#                                                                      #
# Who  Date      Change                                                #
# -------------------------------------------------------------------- #
# AJW  6-21-05   created, made so it looks into subdirectories, and    #
#                copies log files to the valid reports directory       #
#______________________________________________________________________#

use Cwd;

sub printhelp { print $help_info; exit; } #print help

my @directory_listing;
my $curent_dir;

my $collect_files = 0;
my $erase_files = 0;
my $valid_rpts_dir = "";
my $work_directory = "";

#---------------------------------------------------------------------------------------
# handle_report
# parameters - string of directory the global report is in
#            - string of the name of the global report
#            - string of the directory of the variation
# returns    - nothing
# This function erases or copies all the log files in the passed in directory.
#---------------------------------------------------------------------------------------

sub handle_report( $$$ );
sub handle_report( $$$ )
{
  my $directory = shift( @_ );
  my $logdir = "$directory/logs";
  
  # If the user asked to collect the files, copy all reports to the reports diectory.
  if( $collect_files )
  {
    $cmd = "cp $logdir/*.html $valid_rpts_dir";
    system $cmd;
  } 
  if( $erase_files )
  {
    $cmd = "rm $logdir/*.html > junk 2>&1;rm junk";
    system $cmd;
  }
}

#----------------------------------------------------------------------------
# This is Clay's awsome command line argument interpreter.  Run this to
# load all options in a hash called "%comnd_opts".  The hash key values are
# the command line switches, for example "-path" and the matching value
# of the hash is the option that follows the switch.  A switch is
# identified as a sting that starts with a '-' or a '/' any other
# arguments are considered an option for the preceding switch.
#----------------------------------------------------------------------------
my %comnd_opts;
for ( my $i = 0; $i < @ARGV; $i++ ) {
  $ARGV[$i] =~ s/^-// and $comnd_opts{ $ARGV[$i] }= "";
  @ARGV >= ($i+2) and $ARGV[$i+1] !~ /^-/ and ($comnd_opts{ $ARGV[$i] } = $ARGV[$i + 1], ++$i);
}


$work_directory = "none";
$var_directory = "none";
$current_dir = cwd();
foreach $k ( sort keys %comnd_opts ) {
  $k =~ /^(h|help)$/i and &printhelp;
  $k =~ /^(c)$/i and $collect_files = 1 and $valid_rpts_dir = $comnd_opts{$k};
  $k =~ /^(e)$/i and $erase_files = 1;
  $k =~ /^(d)$/i and $work_directory = $comnd_opts{$k};
  $k =~ /^(vd)$/i and $var_directory = $comnd_opts{$k};
}

# Call the help function if no options are specified.
&printhelp if( !keys( %comnd_opts ) );

# If we specified a variation dir, rather than a dated dir, assign the variation dir to 
# the directory we work on.
if( $var_directory ne "none" )
{
  $work_directory = $var_directory;
}
if( $work_directory eq "none" || $valid_rpts_dir eq "none" )
{
  print "Please specify both the location of the test run and the verified good directories on the command line\n";
  exit;
}

# Open the directory we're copying from.

opendir ROOTDIR,$work_directory or die "Error opening test directory.\n";
my @entries = readdir(ROOTDIR); #get all files in the directory
my $root_log_file = "$work_directory/global-log.rpt.html";

if( $collect_files )
{
  opendir TEST_MASTER_DIR,$valid_rpts_dir or die "Error opening valid reports directory.\n";
  close TEST_MASTER_DIR;
}

# Fix for windows.
if( $current_dir =~ /cygdrive/ )
{
  $current_dir =~ s/\/cygdrive\///;
  @paths = split /\//,$current_dir;
  $paths[0] = $paths[0].":";
  $new_dir = "$paths[0]";
  foreach $entry(@paths)
  {
    next if $entry eq $paths[0];
    $new_dir = $new_dir."/$entry";
  }
  $current_dir = $new_dir;
}

if( $var_directory ne "none" )
{
  handle_report($var_directory,$root_log_file,"");
}
else
{
  foreach $the_dirs( @entries )
  {
    next if( $the_dirs =~ /rpt/ );
    if($the_dirs =~ /^[a-zA-z]/) 
    {
      $dir = "$work_directory/$the_dirs";
      handle_report($dir,$root_log_file,"$the_dirs/");	
    }
  }
}

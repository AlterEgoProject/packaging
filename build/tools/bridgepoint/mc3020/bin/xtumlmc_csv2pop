#!/usr/local/bin/perl -sw
# ?ª ŽÀ?sŠÂ‹«‚É‰ž‚¶‚ÄƒpƒX‚ð’¼‚µ‚Ä‚­‚¾‚³‚¢‚Ë('-sw'‚Í?Á‚³‚È‚¢‚±‚Æ)?B
# 
#	MC3020“Œ—zƒeƒNƒjƒJŠg’£”Å—pƒCƒ“ƒXƒ^ƒ“ƒX?ì?¬ƒc?[ƒ‹
#
# $RCSfile: xtumlmc_csv2pop,v $
# $Author: rmulvey $
# $Revision: 1.8 $
#
# Description:
#   ‚±‚ÌƒXƒNƒŠƒvƒg‚Í?A•Ä?‘Mentor GraphicsŽÐ?» 
#   DesignPoint MC‚É‘Î‚µ‚Ä?A“Œ—zƒeƒNƒjƒJ‚ª“ÆŽ©‚ÉŠg’£‚µ‚½
#   MC“Œ—zŠg’£”Å?iƒo?[ƒWƒ‡ƒ“1.82?j‚É“K—p‚·‚é‚±‚Æ‚ð–Ú“I‚Æ
#   ‚µ‚½?uƒCƒ“ƒXƒ^ƒ“ƒX?ì?¬ƒc?[ƒ‹?v‚Å‚ ‚é?B
#   –{ƒc?[ƒ‹‚Í?AMC“Œ—zŠg’£”Å‚É“K?‡‚µ‚½ƒCƒ“ƒXƒ^ƒ“ƒXƒf?[ƒ^
#   ‚ð?Aƒ†?[ƒU‚ª“ü—Í‚µ‚½ƒtƒ@ƒCƒ‹‚©‚çŽ©“®“I‚É•ÏŠ·‚·‚é‚±‚Æ‚ð–Ú
#   “I‚É?ì?¬‚·‚é‚à‚Ì‚Å‚ ‚é?B
# 2001/07/17 CSVƒf?[ƒ^‚Ìƒp?[ƒX?ˆ—?‚ð•Ï?X‚·‚é‚±‚Æ‚ÅˆÈ‰º‚Ì?ˆ—?
#            ‚É‘Î‰ž‚µ‚½
#            1.“Á’èŠ¿Žš?i‚QƒoƒCƒg–Ú‚ª'{'‚Æ“¯‚¶ASCƒR?[ƒh‚É‚È‚é
#                        Š¿Žš?j‚ÅŒë“®?ì‚·‚é?C?³
#            2.ƒRƒ?ƒ“ƒg?s‚ð–³Ž‹‚·‚é?C?³
# 
# Note:
#   ‚±‚ÌƒXƒNƒŠƒvƒg‚Í?AWindowsŠÂ‹«‚Å‚Ì‰^—p‚ð‘z’è‚µ‚Ä
#   ƒqƒAƒhƒLƒ…ƒ?ƒ“ƒg‚ÉSHIFT_JIS‚ðŽg‚Á‚Ä‚¢‚éŠÖŒW?ã?A
#   ƒXƒNƒŠƒvƒg‘S‘Ì‚àSHIFT_JIS‚Å‹L?q‚µ‚Ä‚¢‚é?B
#
#############################################################

# Parse::RecDescent ‚ªƒVƒXƒeƒ€ŠÂ‹«‚ÉƒCƒ“ƒXƒg?[ƒ‹‚Å‚«‚È‚¢‚Æ‚«‚Í?A
# ƒRƒ}ƒ“ƒhƒ‰ƒCƒ“‚Ì -I ƒIƒvƒVƒ‡ƒ“‚© use lib ƒfƒBƒŒƒNƒeƒBƒu‚ð—p‚¢‚Ä?A
# @INC ‚ÉƒpƒbƒP?[ƒW‚ÌƒpƒX‚ð’Ç‰Á‚µ‚Ä‚­‚¾‚³‚¢?B
# (—á) use lib "/home/kuboaki/lib/perl/Parse-RecDescent-1.78/lib";

# ƒ?ƒCƒ“ƒpƒbƒP?[ƒW
package main;

#############################################################
# ƒXƒNƒŠƒvƒg‚ÌŠÂ‹«?Ý’è—p•Ï?”‚Ì“Ç‚Ý?ž‚Ý

# require 'csv2populate.env';

#############################################################
# ƒOƒ??[ƒoƒ‹‚ÈƒVƒ“ƒ{ƒ‹

# ƒXƒNƒŠƒvƒg–¼
$RCSID = q$Id: xtumlmc_csv2pop,v 1.8 2013/01/10 23:42:45 rmulvey Exp $;
$SCRIPT_NAME = do { q$RCSfile: xtumlmc_csv2pop,v $ =~ /RCSfile: (.*),v /g; my($s) = $1; $s };

# ƒXƒNƒŠƒvƒg‚ÌƒŠƒrƒWƒ‡ƒ“
$REVISION = do { my @r = (q$Revision: 1.8 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };

# ƒRƒs?[ƒ‰ƒCƒg
$COPYRIGHT_T = "(C) Copyright 1999-2013 Mentor Graphics Corp. All rights reserved.";

# “ú–{Œê•ÏŠ·ƒRƒ}ƒ“ƒh‚ðŽg—p‚·‚é?ê?‡‚ÉŠÖ‚·‚é‹L?q?B
# –{ƒXƒNƒŠƒvƒg‚Å‚ÍŒ´‘¥‚Æ‚µ‚Ä?A
# (1) WindowsŠÂ‹«‚Å—p‚¢‚éƒtƒ@ƒCƒ‹‚ÌƒR?[ƒh‚Í SJIS
# (2) UnixŠÂ‹«‚Å—p‚¢‚éƒ@ƒCƒ‹‚ÌƒR?[ƒh‚Í EUC
# ‚Æ‰¼’è‚µ‚Ä‚¢‚é?B
# ‚µ‚½‚ª‚Á‚Ä?AWindowsŠÂ‹«‚Å?ì?¬‚µ‚½SJISƒR?[ƒh‚Ìƒtƒ@ƒCƒ‹‚ð
# UnixŠÂ‹«‚ÖŽ?‚Á‚Ä‚«‚Ä–{ƒXƒNƒŠƒvƒg‚Å?ˆ—?‚µ‚æ‚¤‚Æ‚·‚é‚Æ?A
# ŠÂ‹«‚É‚æ‚Á‚Ä‚Í?A”¼ŠpƒJƒi‚ª‰»‚¯‚é?A•¶Žš—ñ‚ª?³‚µ‚­”FŽ¯‚³‚ê‚È‚¢?A
# ?³‚µ‚­ƒtƒ@ƒCƒ‹‚ª‰ð?Í‚Å‚«‚È‚¢?A‚È‚Ç‚Ì–â‘è‚ª?¶‚¶‚é?ê?‡‚ª‚ ‚é?B
# ‹t‚Ì?ê?‡‚à“¯—l‚Å‚ ‚é?B
# ‚»‚Ì‚æ‚¤‚È‚±‚Æ‚ª‹N‚«‚½‚È‚ç‚Î?A-sjis?A-euc ƒIƒvƒVƒ‡ƒ“‚ðŽŽ‚Ý‚é
# ‚Æ‰ü‘P‚³‚ê‚éŽ–‚ª‚ ‚é?B
# ˆÈ‰º‚Í?A‚±‚ÌƒIƒvƒVƒ‡ƒ“‚É‚Â‚¢‚Ä‚Ì?à–¾‚Å‚ ‚é?B
# ‘O’ñ1) 
# “ú–{ŒêƒR?[ƒh•ÏŠ·—pŠO•”ƒvƒ?ƒOƒ‰ƒ€‚ª‚ ‚é‚±‚Æ?B
# default ‚Å‚Í?Akcc ‚ªŽg—p‚Å‚«‚é‚±‚Æ‚ð‘z’è‚µ‚Ä‚¢‚é?B
# ‘¼‚Ìƒvƒ?ƒOƒ‰ƒ€‚ðŽg‚¤?ê?‡‚É‚Í?A‰º‹L‚ÌƒOƒ??[ƒoƒ‹•Ï?”‚ð?‘‚«Š·‚¦‚é?B
# •ÏŠ·‚ÉŽg‚¤ƒvƒ?ƒOƒ‰ƒ€‚Í?A•W?€“ü—Í‚©‚ç“Ç‚Ý?ž‚Ý•W?€?o—Í‚Ö?‘‚«?o‚·
# ƒvƒ?ƒOƒ‰ƒ€‚Å‚ ‚é‚±‚Æ?B
# ‘O’ñ2)
# SJISƒR?[ƒh‚Ìƒtƒ@ƒCƒ‹‚É‚¨‚¢‚Ä‚Í?A”¼ŠpƒJƒi‚ðŽg—p‚µ‚Ä‚¢‚È‚¢‚±‚Æ?B
# Žg—p•û–@)
# csv ƒtƒ@ƒCƒ‹‚Æ ?¶?¬ƒR?[ƒh‚ª SJIS ‚Ì‚Æ‚«‚Í -sjis 
# csv ƒtƒ@ƒCƒ‹‚Æ ?¶?¬ƒR?[ƒh‚ª EUC ‚Ì‚Æ‚«‚Í -euc
# ‚ðŽw’è‚·‚é?B
# ‚±‚ê‚ç‚ÌƒIƒvƒVƒ‡ƒ“‚Í?Acsv ƒtƒ@ƒCƒ‹‚Æ ?¶?¬ƒR?[ƒh‚Ì“ú–{ŒêƒR?[
# ƒh‚ªˆê’v‚µ‚È‚¢?ê?‡‚É‚Â‚Ä‚¢‚ÍŽx‰‡‚µ‚Ä‚¢‚È‚¢?B
$TOSJIS_COMMAND = 'kcc -es';
$TOEUC_COMMAND = 'kcc -se';

# ‰ð?ÍŒ‹‰Ê‚ð‚µ‚Ü‚¤ƒe?[ƒuƒ‹(‘åˆæ“I)
my %csv_tbl = ( );
my %attrs_tbl = ( );
my %collection_info_tbl = ( );
my %collection_part = ( );
my %comment_tbl = ( );
my %file_lines = ( );
my %subtype_key_tbl = ();

# ’èŒ^ƒtƒH?[ƒ}ƒbƒg•”•ª‚ÌŽw’è?B
my $head_part_of_StaticManyRelationshipPopulateionBody=<<EO_HEAD1;
.//============================================================================
.// File:      populate.arc
.//
.// Description:
.// This archetype file contains instance population definitions
.// for each object tagged as a static population.
.//
.// Notice:
.// $COPYRIGHT_T
.//
.//============================================================================
.//
.//============================================================================
.// *** Static population utilities:
.//============================================================================
.//
.//============================================================================
.// StaticManyRelationshipPopulateionBody
.//
.//============================================================================
.function StaticManyRelationshipPopulateionBody
  .param inst_ref obj  .// O_OBJ
  .param inst_ref rel  .// R_REL
  .assign attr_MaxExtentSize = 0
  .assign attr_StaticExtentSize = 0
  .//
  .if ( false )
EO_HEAD1

my $foot_part_of_StaticManyRelationshipPopulateionBody=<<'EO_FOOT1';
  .else
    .assign attr_MaxExtentSize = 0
    .assign attr_StaticExtentSize = 0
  .end if
.end function
EO_FOOT1

my $head_part_of_StaticInstancePopulateionBody=<<'EO_HEAD0';
.//
.//============================================================================
.// StaticInstancePopulateionBody
.//
.//============================================================================
.function StaticInstancePopulateionBody
  .param inst_ref obj  .// O_OBJ
  .assign attr_StaticExtentSize = 0
EO_HEAD0

my $foot_part_of_StaticInstancePopulateionBody=<<EO_FOOT;
  .elif (obj.Key_Lett == "")
    .assign attr_StaticExtentSize = 0
  .end if
.end function
.//
.//============================================================================
.// Do not add anything at the end of this file!
.//============================================================================
EO_FOOT

# ?ì‹Æˆæ(‚Ù‚ñ‚Æ‚Íƒ??[ƒJƒ‹‚É‚·‚×‚«)
my %rec = ( );
my %attrec = ( );
my $recnum = 0; 
my $attrnum = 0; 
my $dup = 1;
my %ref_desc = ( );

#############################################################
# ƒ?ƒCƒ“ƒpƒbƒP?[ƒW
package main;

#############################################################
# ‚±‚±‚©‚ç?ˆ—?ƒ‹?[ƒ`ƒ“‚ÌŠJŽn
{
    # debug Žž‚Í?AperlŽ©?g‚ÌƒGƒ‰?[‚âƒEƒH?[ƒjƒ“ƒO‚Æ‚ª“¯Šú‚·‚é‚æ‚¤‚É?A
    # ƒvƒ?ƒOƒ‰ƒ€‚ªSTDOUT‚Ö?o—Í‚µ‚Ä‚¢‚éƒ?ƒbƒZ?[ƒW‚ðSTDERR‚Ö?‘‚«‚¾‚·‚æ‚¤‚É‚µ‚Ä‚¨‚­?B
    if ( $debug ) {
        *STDOUT = *STDERR;
    }

	# ƒvƒ?ƒOƒ‰ƒ€ŠJŽnƒ?ƒbƒZ?[ƒW‚Ì•\Ž¦
    &print_prologue;

    # ƒRƒ}ƒ“ƒhƒ‰ƒCƒ“‚ÌƒIƒvƒVƒ‡ƒ“‚Ì?ˆ—?

	# usage ‚Ì•¶Žš—ñ?B
    local $usage = "\nusage: $SCRIPT_NAME [options] csv_file_or_dir src_dir [population_file]\n";
    local $default_populate_file = "populate.arc";

	# ƒwƒ‹ƒv—p‚Ìƒ?ƒbƒZ?[ƒW
	&print_help() if $help;

	if ( $outdir ) {
		-d $outdir or die print "$outdir: directory not found.\n";
	}
	
    # ƒfƒBƒŒƒNƒgƒŠ–¼‚Æƒtƒ@ƒCƒ‹–¼‚ðŽæ‚è?o‚·?B
	# ex. csv2pop TestData table/H8_table/gen/source pop.arc
	my $csv_dir = shift;
	unless ( defined $csv_dir ) {
		die $usage."\n";
	}
	-d $csv_dir or -f $csv_dir or die "$csv_dir not found.\n";

	my $src_dir = shift;
	unless ( defined $src_dir ) {
		die $usage."\n";
	}
	-d $src_dir or die "$src_dir is not a directory.\n";

	my $user_populate_file = shift;
	unless ( defined $user_populate_file ) {
		$user_populate_file = $default_populate_file;
	}

    # ƒ?ƒCƒ“ƒ‹?[ƒ`ƒ“‚ÌŒÄ?o‚µ
	&csv2pop_main( $csv_dir, $src_dir, $user_populate_file );

	# ƒvƒ?ƒOƒ‰ƒ€?I—¹ƒ?ƒbƒZ?[ƒW‚Ì•\Ž¦
    &print_epilogue;
}

#############################################################
# ƒ?ƒCƒ“ƒ‹?[ƒ`ƒ“
package main;
sub csv2pop_main {
    my( $csv_dir, $src_dir, $populate_file ) = @_;

    # ‰ð?Í‚ÌŠJŽn
    # ƒ\?[ƒXƒR?[ƒh‚©‚ç‘®?«?î•ñ‚ðŽæ“¾‚·‚é?B
    print "\nParsing source files...\n";
    &src_parse($src_dir);

    # Žæ“¾‚µ‚½“à—e‚ðŠm”F‚·‚é?B
    &dump_attrs_table() if $debug ;

    # CSVƒtƒ@ƒCƒ‹‚ð‰ð?Í‚·‚é?B
    print "\nReading instance table csv files...\n";
    &csv_parse($csv_dir);
    
    # Žæ“¾‚µ‚½“à—e‚ðŠm”F‚·‚é?B
    &dump_csv_table() if $debug ;


    # ?¶?¬‚ÌŠJŽn
    # Žæ“¾‚µ‚½?î•ñ‚ðŽg‚Á‚Äƒe?[ƒuƒ‹‚ð?¶?¬‚·‚é?B
    print "\nGenerating '$populate_file' ...\n";
    &table_generate($csv_dir, $src_dir, $populate_file);
}

#############################################################
# ƒvƒ?ƒOƒ‰ƒ€ŠJŽnƒ?ƒbƒZ?[ƒW
package main;
sub print_prologue {
	print "\n";
    print "$SCRIPT_NAME ($REVISION)\n";
	print "$COPYRIGHT_T\n";
    print "$RCSID\n";

    print "\nStart time: ".&MyDate::now."\n";
}

#############################################################
# ƒvƒ?ƒOƒ‰ƒ€?I—¹ƒ?ƒbƒZ?[ƒW
package main;
sub print_epilogue {
    print "Finished!\n";
    print "\nEnd time: ".&MyDate::now."\n";
}

#############################################################
# ƒRƒ}ƒ“ƒhƒ‰ƒCƒ“ ƒwƒ‹ƒvƒ?ƒbƒZ?[ƒW
# -help ‚ªƒZƒbƒg‚³‚ê‚½‚Æ‚«?A$help ‚ª?^‚É‚È‚Á‚Ä‚±‚ê‚ç‚ð•\Ž¦‚·‚é?B
package main;
sub print_help {
	print <<EO_HELP;
$usage
options:
  -help : print this message.
  -outdir=<dir> : output dir for population file and work files (default ".").
  -debug : print debug informations.

csv_file_or_dir:
  csv file or directory path name (auto detect).

src_dir:
  source code directory path name.

population_file:
  population file path name (default "<outdir>/populate.arc").

EO_HELP
	$help = 0;
	# ‚¨‚µ‚Ü‚¢?B
	exit 1;
}

#############################################################
# CSVƒtƒ@ƒCƒ‹‚ð‰ð?Í‚·‚éƒTƒuƒ‹?[ƒ`ƒ“?B
package main;
sub csv_parse {
    my ($dir) = @_;

    # ƒtƒ@ƒCƒ‹–¼‚ÌƒŠƒXƒg‚ð‚Â‚­‚é?B
    # ‚à‚µƒfƒBƒŒƒNƒgƒŠŽw’è‚ªƒtƒ@ƒCƒ‹‚¾‚Á‚½‚ç?A
    # ‚»‚Ìƒtƒ@ƒCƒ‹‚ð?ˆ—?‚·‚é‚±‚Æ‚É‚µ‚Ä‚¨‚­?B
    my @files = ( );
	if (  -f $dir ) {
		$files[0] = $dir; 
	} elsif ( -d $dir ) {
		$dir =~ s/\/$//;
		my @files2 = <$dir/*.csv>;
        # Windows ƒtƒ@ƒCƒ‹ƒVƒXƒeƒ€‚Å‚Í
        # Šú‘Ò’Ê‚è‚É‚Í“®?ì‚µ‚È‚¢‚Ì‚Å?A‰º‹L?ˆ—?‚É‚Ä‰ñ”ð‚·‚é?B
        foreach my $file ( @files2 ) {
            if ( $file =~ /\.csv$/ ) {
                push  @files, $file;
            }
        }
	} 
	die "csv files not found.\n" unless $#files >= 0;

    undef $/;      #  ?s’PˆÊ‚Å‚Í‚È‚­ƒpƒ‰ƒOƒ‰ƒt‘S‘Ì‚ð“Ç‚Ý?ž‚Þ‚±‚Æ‚É‚·‚é?B
    my $text = "";
	my $cnt = 0;

    # ‘S‚Ä‚Ìƒtƒ@ƒCƒ‹‚ð?ˆ—?‚·‚é?B
    # ŠJ‚¯‚È‚¢ƒtƒ@ƒCƒ‹‚ª‚ ‚Á‚½‚ç‚â‚ß‚¿‚á‚¤?B 
    foreach my $file ( @files ) {
        print "$file...\n"; 
        # open FILE, "<$file" or die; 
        if( $euc ) {
            open FILE, "$TOSJIS_COMMAND $file |" or die; 
        } elsif( $sjis ) {
            open FILE, "$TOEUC_COMMAND $file |" or die; 
        } else { 
            open FILE, "<$file" or die;    
        }
        $text .= <FILE>;     # ‘å’_‚É‘S•”ƒ}?[ƒW‚µ‚¿‚á‚¤?B
		my @lines = split( "\n", $text );
		$cnt = $#lines + 1;
		$::file_lines{ $cnt } = $file;		
		close FILE;
    }

	print "\n";

    # Parse‚·‚é?B
    print "\nParsing instance tables...\n";
    &parse($text);

}

sub ltrim() {
    local ($tr)=@_;
    if (!defined $tr) {
        return $tr;
    }
    $tr =~ s/^[ \t]*//g;
#    $tr =~ s/[ \t]*$//g;
    return $tr;		
}
sub rtrim() {
    local ($tr)=@_;
    if (!defined $tr) {
        return $tr;
    }
#    $tr =~ s/^[ \t]*//g;
    $tr =~ s/[ \t]*$//g;
    return $tr;		
}

sub parse {
    my ( $text ) = @_;
    my $chr;
    my $addSize=0; #Š¿Žš,ƒJƒ“ƒ}‚Ì?ê?‡1
    my $asc;
    my $len=length($text);
    my $i;
    my $j;
    my $mode=0;    #1:ƒXƒy?[ƒX|CR, 2:•¶ŽšŠJŽn, 3:•¶Žš—ñ
    my @item=();
    my @find=();
    my @typerec=();
    my $item_max=0;
    my $val="";
    my $thisline=1;
    my $data_start=0;
    my $type_start=0;

    for($i=0;$i<$len;$i++){
        $chr=substr($text,$i,1);
        $addSize=0;
        $asc = ord($chr);
        if ($asc>=0x81 && $asc<=0x9f) { $addSize=1 };
        if ($asc>=0xe0 && $asc<=0xfc) { $addSize=1 };
        if ($addSize==1){   #Š¿Žš
            $chr=substr($text,$i,2);
        }
        if ($chr eq "\"") {
            if ($mode==3) {
                $mode=0;
            }else{
                if ($mode<2) {
                    $mode=3;
                }
                if (substr($text,$i+1,1) eq "\""){
                    $addSize=1;
                }
            }
        }
        if ($chr eq "\n") {
            if (defined $item[0]){
                $item_max++;
                while(&ltrim($item[$item_max-1]) eq "" && $item_max > 1) {
                    $item_max--;
                }
#                for($j=0;$j<$item_max;$j++){
#                    print "item[$j]=$item[$j]\n";
#                }
                $val=$item[0];
                if ($data_start==2) {
                    @find = ();
                    for ($j=0;$j<$item_max;$j++) {
                        $find[$j] = $item[$j];
                    }
                    if (substr($item[0],0,1) ne "#") {
                        @{ $::rec->{DATA}->[$::recnum] } = @find;
                        $::recnum++;
                    }
                }
                if ($data_start==1) {
                    $item[0]=substr($item[0],1);
                    $find[0]=substr($find[0],1);
                    for ($j=0;$j<$item_max;$j++){
                        my $atn =  $item[$j];
                        my $pos =index($find[$j], "{");
                        if ($pos>=0) {
                            my $attr=substr($atn,$pos+1);
                            $atn = substr($atn,0,$pos);
                            my $pos =index($attr, "}");
                            if ($pos>=0) {
                                $attr = substr($attr,0,$pos);
                            }else{
                                print ::get_file_lines($thisline)
                                    ."Attribute '$item[$j]' not found '}' in "
                                    ."Class '$::rec->{CLASS_NAME}'(Key '$::rec->{CLASS_KEY}')"
                                    ." Domain '$::rec->{DOMAIN_NAME}'\n"
                            }
                            do {
                                my $attrs=$attr;
                                $pos = index($attr, ";");
                                if ($pos>=0) {
                                    $attrs = substr($attr, 0, $pos);
                                    $attr = substr($attr, $pos+1);
                                }
                                if (uc(substr($attrs,0,6)) eq "STRING") {
                                    $::attrec->{ATTR_TYPE} = "string";
                                    $::attrec->{ATTR_ID_TYPE} = "string";
                                }
                                if (uc(substr($attrs,0,4)) eq "OMAP") {
                                    $::attrec->{ATTR_ID} = "omap";
                                }
                                if (uc(substr($attrs,0,7)) eq "COMMENT") {
                                    $::attrec->{ATTR_ID} = "comment";
                                }
                                if (substr($attrs,0,1) eq "I") {
                                    $::attrec->{ATTR_ID} = $attrs;
                                }
                                my $poseq =index($attrs, "=");
                                if ($poseq>0){
                                    my $relation_number = substr($attrs, 0, $poseq);
                                    my $ref_target_attr = substr($attrs, $poseq + 1);
                                    $::ref_desc{REL_NUMBER} = &ltrim($relation_number);
                                    $poseq =index($ref_target_attr, ".");
                                    $::ref_desc{REL_KEY} = substr($ref_target_attr, 0, $poseq);
                                    $::ref_desc{REL_TARGET} = substr($ref_target_attr, $poseq+1);
                                    push @{ $::attrec->{REL_ARRAY} }, { %::ref_desc };
                                    $::ref_desc = { };
                                }
                            } while ($pos >= 0);
                        }
                        $::attrec->{ATTR_NAME} = $atn;
                        if ( exists $::rec->{ATTR_SPEC}->{$atn} ) {
                            my $new_attr = $atn."__".$dup."__"; $dup++;
                            print ::get_file_lines($thisline)
                                ."Attribute '$atn' is already used in "
                                ."Class '$::rec->{CLASS_NAME}'(Key '$::rec->{CLASS_KEY}')"
                                ." Domain '$::rec->{DOMAIN_NAME}'."
                                ." using `$new_attr' instead of `$atn'.\n";
                            $::attrec->{ATTR_NAME} = $new_attr;
                        } else {
                            $::attrec->{ATTR_NAME} = $atn;
                        }
                        $::attrec->{ATTR_NUMBER} = $::attrnum;
                        if (defined $typerec[$j]) {
                            $::attrec->{ATTR_ID_TYPE} = $typerec[$j];
                        }else{
                            $::attrec->{ATTR_ID_TYPE} = "integer";
                        }
                        $::rec->{ATTR_SPEC}->{$::attrec->{ATTR_NAME}} = $::attrec;
                        $::attrnum++;
                        $::attrec = { };
                        $::attrec->{ATTR_TYPE} = "";
                    }
                    $data_start=2;
                } 
                if ($type_start==1) {
                    $item[0]=substr($item[0],1);
                    @typerec=();
                    for ($j=0;$j<$item_max;$j++){
                        $typerec[$j]=$item[$j];
                    }
                    $type_start=0;
                }
                if (uc(substr($val,0,5)) eq "#TYPE") {
                    $data_start=0;
                    $type_start=1;
                }else{
                    $type_start=0;
                }
                if (uc(substr($val,0,5)) eq "#TB_S") {
                    $::rec = { };
                }elsif (uc(substr($val,0,5)) eq "#DATA") {
                    # DOMAIN_NAME ‚Ì‹L?q‚ª‚È‚¯‚ê‚Î
                    unless ( exists $::rec->{DOMAIN_NAME} ) { 
                        my $new_domain = "DummyDomain";          # ‚¢‚¢‰ÁŒ¸‚È?‰Šú’l‚¾‚¯‚Ç?c?B
                        print ::get_file_lines($thisline)."Domain Name not found in "
                            ."Class Key '$::rec->{CLASS_KEY}'"
                            ."(Class Name '$::rec->{CLASS_NAME}'). using `$new_domain'.\n";
                        $::rec->{DOMAIN_NAME} = $new_domain; 
                    }
                    # CLASS_KEY ‚Ì?d•¡‚Ìƒ`ƒFƒbƒN 
                    my $prefix = $::rec->{DOMAIN_NAME}."_".$::rec->{CLASS_KEY};
                    if ( exists $::csv_tbl{$prefix} ) {
                        my $new_key = $::rec->{CLASS_KEY}."__".$::dup."__"; $::dup++;
                        print ::get_file_lines($thisline)
                            ."Class Key '$::rec->{CLASS_KEY}'(Class Name '$::rec->{CLASS_NAME}')"
                            ." is already used in Domain '$::rec->{DOMAIN_NAME}'."
                            ." using `$new_key' instead of `$::rec->{CLASS_KEY}'.\n";
                        $::rec->{CLASS_KEY} = $new_key;
                    }
                    $::attrec = { };
                    $::recnum = 0;
                    $::attrnum = 0;
                    $data_start=1;
                }elsif (uc(substr($val,0,5)) eq "#TB_E") {
                    $::rec->{DATA_RECS} = $::recnum;
                    foreach my $attr ( keys %{ $::rec->{ATTR_SPEC} } ) {
                        my $attr_num = $::rec->{ATTR_SPEC}{$attr}{ATTR_NUMBER};
                        for my $i ( 0 .. $::recnum-1 ) {
                            $::rec->{ATTR_SPEC}{$attr}{ATTR_DATA}[$i] =  $::rec->{DATA}[$i][$attr_num];
                        }
                    }
                    foreach my $attr ( keys %{ $::rec->{ATTR_SPEC} } ) {
                        for my $i ( 0 .. ( $::rec->{DATA_RECS} - 1 ) ) {
                            unless ( defined $::rec->{ATTR_SPEC}{$attr}{ATTR_DATA}[$i] ) {
                                my $item = "0"; 
                                $item = "\"\"" if $::rec->{ATTR_SPEC}{$attr}{ATTR_TYPE} eq "string";
                                print ::get_file_lines($thisline)
                                    ."Class '$::rec->{CLASS_NAME}':"
                                    ." Attribute '$::rec->{ATTR_SPEC}{$attr}{ATTR_NAME}':"
                                    ." Data line '$i':"
                                    ." data not found. using `$item' instead.\n";
                                $::rec->{ATTR_SPEC}{$attr}{ATTR_DATA}[$i] = $item;
                            }
                        }
                    }
                    my $prefix = $::rec->{DOMAIN_NAME}."_".$::rec->{CLASS_KEY};
                    $::csv_tbl{$prefix} = $::rec;
                    $data_start=0;
                    @typerec=();
                }elsif (uc(substr($val,0,12)) eq "#DOMAIN_NAME") {
                    my $dnam = $item[1];
                    $::rec->{DOMAIN_NAME} = $dnam;
                }elsif (uc(substr($val,0,16)) eq "#DOMAIN_KEY_LETT") {
                    my $dk = $item[1];
                    $::rec->{DOMAIN_KEY} = $dk; 
                }elsif (uc(substr($val,0,11)) eq "#CLASS_NAME") {
                    my $cnam = $item[1];
                    $::rec->{CLASS_NAME} = $cnam;
                }elsif (uc(substr($val,0,10)) eq "#CLASS_NUM") {
                    my $cno = $item[1];
                    $::rec->{CLASS_NUMBER} = $cno;
                }elsif (uc(substr($val,0,15)) eq "#CLASS_KEY_LETT") {
                    my $ck = $item[1];
                    $::rec->{CLASS_KEY} = $ck; 
                }elsif (uc(substr($val,0,8)) eq "#IS_OMAP") {
                    my $omap = $item[1]; 
                    $::rec->{IS_OMAP} = $omap;
                }
                @item=();
                @find=();
                $item_max=0;
                $mode=1;
            }
            $thisline++;
        }elsif ($chr eq ",") {
            $find[$item_max]=&rtrim($find[$item_max]);
            $item[$item_max]=substr($item[$item_max],0,length($find[$item_max]));
            if ($mode!=3){
                $mode = 0;
                $item_max++;
                $item[$item_max]="";
                $find[$item_max]="";
            }
        }else{
            if ($mode<2) {
                if ($asc >= 0x20) {
                    $mode = 2;
                }else{
                    $mode = 1;
                }
            }
        }
        if ($mode == 2) {
            $item[$item_max] .= $chr;
            if (length($chr)>1){
                $find[$item_max] .= "kk";
            }else{
                $find[$item_max] .= $chr;
            }
        }
        $i+=$addSize;
    }
}

#############################################################
# ‚Ì‚×?s?”‚©‚çƒtƒ@ƒCƒ‹–¼‚Æ?s”Ô?†‚ð‹?‚ß‚é?B
package main;
sub get_file_lines {
	my ( $thisline ) = @_;
	my $file = "";
	my $start = 0;
	my $num = 0;
	my $cnt = 0;

	foreach $cnt ( sort { $a <=> $b; } keys %::file_lines ) {
 		if ( $thisline <= $cnt ) {
			$file = $::file_lines{ $cnt };			
			$num = $thisline - $start ;
			last;
		}
		$start = $cnt;
	}

	return "$file:$num: ";
}

#############################################################
# Žæ“¾‚µ‚½ %::csv_tbl ‚Ì“à—e‚ðƒ_ƒ“ƒv‚·‚é?B
package main;
sub dump_csv_table {
    foreach my $key ( sort keys %main::csv_tbl ) { 
        print "Prefix: $key--------------------\n";
        foreach my $prop ( sort keys %{$::csv_tbl{$key}} ) {
			if( $prop eq "ATTR_SPEC" ) {
                print "    $prop: \n";
				foreach my $attr ( sort  keys %{$::csv_tbl{$key}{ATTR_SPEC}} ) {
					print "        $attr: \n"; 
                    foreach my $attr_desc ( sort keys %{$::csv_tbl{$key}{ATTR_SPEC}{$attr}} ) {
                        if( $attr_desc eq "REL_ARRAY" ) {
                            my @rel_array = @{ $::csv_tbl{$key}{ATTR_SPEC}{$attr}{REL_ARRAY} }; 
                            for ( my $i=0; $i <= $#rel_array; $i++) {
                                print "            $attr_desc\[$i\]: \n";
                                foreach my $rel_item_detail ( sort keys %{ $rel_array[$i] } ) {
                                    print "              $rel_item_detail : $rel_array[$i]->{$rel_item_detail}\n";
                                }
                            }
                        } elsif( $attr_desc eq "ATTR_DATA" ) {
                            print "            ATTR_DATA\n";
                            for my $i ( 0 .. ( $::csv_tbl{$key}{DATA_RECS} - 1 ) ) {
                                print "              $::csv_tbl{$key}{ATTR_SPEC}{$attr}{ATTR_DATA}[$i]\n";
                            }
                        } else {
                            print "            $attr_desc: ".$::csv_tbl{$key}{ATTR_SPEC}{$attr}{$attr_desc}."\n";
                        }
                    }
				}
			} elsif ( $prop eq "DATA" ) {
                print "    $prop: \n";
				foreach my $dat ( @{$::csv_tbl{$key}{DATA}} ) {
                    my $dat_join = join ',', @$dat;
                    print "      --DATA--".$dat_join."--\n";
                }
            } else {
                print "    $prop: ".$::csv_tbl{$key}{$prop}."\n";
			}
        }
    }
}

#############################################################
# ƒ\?[ƒXƒR?[ƒh‚©‚ç‘®?«?î•ñ‚ðŽæ“¾‚·‚éƒTƒuƒ‹?[ƒ`ƒ“?B
package main;
sub src_parse {
    my ($dir) = @_;
    
    # file–¼‚ðƒOƒ?ƒu‚µ‚ÄƒŠƒXƒg‚ð“¾‚é?B
	$dir =~ s/\/$//; 
    my @files = <$dir/*object.c>;
 	if ( $#files < 0 ) {
 		die "No *_object.c files found.\n";
 	}
    
    # ‚»‚ê‚¼‚ê‚Ìƒtƒ@ƒCƒ‹‚ð?ˆ—?‚·‚é?B
    foreach my $file ( @files ) {
        print "$file...\n"; 
        # open FILE, "<$file" or die; 
        if( $euc ) {
            open FILE, "$TOSJIS_COMMAND $file |" or die; 
        } elsif( $sjis ) {
            open FILE, "$TOEUC_COMMAND $file |" or die; 
        } else { 
            open FILE, "<$file" or die;    
        }
        
        # ƒtƒ@ƒCƒ‹–¼‚©‚ç?uƒhƒ?ƒCƒ“_ƒNƒ‰ƒX?v‚ÌƒvƒŒƒtƒBƒNƒX•¶Žš—ñ‚ðŠl“¾‚·‚é?B
        my $prefix = do { ($file =~ /([^\/\\]*)_object.c/g); $1; };

		my $found = 0;
        while(<FILE>) {
            # Object pool ‚Ì?s‚Ü‚Å“Ç‚Ý”ò‚Î‚·?B
            if ( /(const[ \t]+)?($prefix)_s[ \t]+($prefix)_objectpool_s[^=]+=[\t ]*/i ) {
				$found ++;
				last;
			} 
        }		
		if ( $found > 0 ) {
			$found = 0;

			# ‚»‚Ì2?s?æ‚É‚ ‚éƒRƒ?ƒ“ƒg?s‚ðŽæ‚è?ž‚Þ?B
			my $target_comment = <FILE>;
			$target_comment = <FILE>;
			# print "    attr_spec: $target_comment\n";
			$found = 
				$target_comment =~ /[ \t]+\/\*[ \t](.*)[ \t]+\*\//;

			if ( $found == 1 ) {
				$found = 0;

				# ”z—ñ‚É‚µ‚Äƒe?[ƒuƒ‹‚Ö‚µ‚Ü‚Á‚Ä‚¨‚­?B
				$::attrs_tbl{$prefix} = [ split( '[ \t]*,[ \t]*', $1 ) ];
				
				# ‚³‚ç‚É1?s?æ‚ÌƒRƒ?ƒ“ƒg‚ðŽæ‚è?ž‚Þ?B
				$comment_tbl{$prefix} = $target_comment = <FILE>;
				$found 
					= $target_comment =~ s/\/\*[ \t]*{(.*)[ \t]*}[ \t]*\*\/[ \t\n\r]+/$1/;

				if ( $found == 1 ) {
                    # —~‚µ‚¢Œ`Ž®‚ÌƒRƒ?ƒ“ƒg‚ª‚Ý‚Â‚©‚Á‚½?B
                    # “à—e‚ð–³Ž‹‚µ‚Ä ’Pˆê’l‚Í 'S', 
                    # (Escher_UniqueID_t\)xxx ‚È‚ç 'I', {xx,xx}Œ`Ž®‚È‚ç 'C' ‚É?k‘Þ‚·‚é?B
					$target_comment =~ s/[ \t]*,[ \t]*$//;
					$target_comment =~ s/[ \t]*//g;
					$target_comment =~ s/\(Escher_UniqueID_t\)[^,]+/\%/;
					$target_comment =~ s/[^,%{}]+/S/g;
					$target_comment =~ s/\%/I/g;
					$target_comment =~ s/{S,S}/C/g;
					my @collection_info = split( ',', $target_comment );

					for ( my $k = 0; $k <= $#collection_info; $k++ ) {
						$attr = $::attrs_tbl{$prefix}[$k];
						$::collection_info_tbl{$prefix}{$attr} = $collection_info[$k];
#						print '$::collection_info_tbl{'.$prefix."}{".$attr."} = ".$collection_info[$k]."\n" if $debug; 
						print '$::collection_info_tbl{'.$prefix."}{".$attr."} = ".$collection_info[$k]."\n" if $debug; 
					}
                    
                    if ( $#collection_info < $#{$::attrs_tbl{$prefix}} ) {
                        # ƒRƒŒƒNƒVƒ‡ƒ“?î•ñ‚Ì?”‚ª‘®?«?î•ñ‚Ì?”‚Æˆê’v‚µ‚È‚¢‚Æ‚«
                        # ‘®?«?î•ñ‚Ì?”‚Ì?”‚æ‚è‘½‚¢•ª‚Í–³Ž‹‚·‚é?B
                        # ‘«‚è‚È‚¢‚Æ‚«‚ÍŒx??ƒ?ƒbƒZ?[ƒW‚ð?o‚µ‚ÄŽc‚è‚ð’P?ƒŽQ?Æ‚Æ‚µ‚Ä?ˆ—?‚·‚é?B
                        
                        for ( $k = $#collection_info + 1 ; $k <= $#{$::attrs_tbl{$prefix}}; $k++ ) {
                             $attr = $::attrs_tbl{$prefix}[$k];
                             $::collection_info_tbl{$prefix}{$attr} = 'S';
                             print "Class prefix $prefix, attribute '$attr': sample data item not found. using `0' instead.\n";
#                             print '$::collection_info_tbl{'.$prefix."}{".$attr."} = ".$collection_info[$k]."\n" if $debug; 
                             print '$::collection_info_tbl{'.$prefix."}{".$attr."} = ".$collection_info[$k]."\n" if $debug; 
                         }
                    }
				} else {
					print "Class prefix $prefix: sample data line not found.\n";
				}
			} else {
				print "Class prefix $prefix: attribute information line not found.\n";
			}
		} else {
			print "Class prefix $prefix: prototype lines not found.\n";
		}
		
		close FILE;
    }
}

#############################################################
# Žæ“¾‚µ‚½ %::attrs_tbl ‚Ì“à—e‚ðƒ_ƒ“ƒv‚·‚é?B
package main;
sub dump_attrs_table {
    foreach my $pf ( sort  keys %::attrs_tbl ) {
        print "KEY:--$pf--\n";
        foreach my $ats ( @{ $::attrs_tbl{$pf} }) {
            print "   ATTR:--$ats-- \n";
        }
    }
}

#############################################################
# Žæ“¾‚µ‚½?î•ñ‚ðŽg‚Á‚Äƒe?[ƒuƒ‹‚ð?¶?¬‚·‚é?B
package main;
sub table_generate {
	my( $csv_dir, $src_dir, $populate_file ) = @_;

    # ?‘‚«?o‚µ—pˆêŽžƒtƒ@ƒCƒ‹‚ð?ì?¬‚·‚é?B
    my $output_file 
        = defined $outdir ? 
            "$outdir/\@\@".$::SCRIPT_NAME."_".$$."\@\@" : "\@\@".$::SCRIPT_NAME."_".$$."\@\@";
    if ( $euc ) {
        open OUTPUT, "| $TOEUC_COMMAND > $output_file" or die;
    } elsif ( $sjis ) {
        open OUTPUT, "| $TOSJIS_COMMAND > $output_file" or die;
    } else {
        open OUTPUT, "> $output_file" or die;
    }
    my $output_file2 
        = defined $outdir ? 
            "$outdir/\@\@".$::SCRIPT_NAME."2_".$$."\@\@" : "\@\@".$::SCRIPT_NAME."2_".$$."\@\@";
    if ( $euc ) {
        open OUTPUT2, "| $TOEUC_COMMAND > $output_file2" or die;
    } elsif ( $sjis ) {
        open OUTPUT2, "| $TOSJIS_COMMAND > $output_file2" or die;
    } else {
        open OUTPUT2, "> $output_file2" or die;
    }

	# .// StaticInstancePopulateionBody ‚ÌŽn‚Ü‚è•”•ª‚ð?‘‚«?o‚·?B
	local $if_or_elif = '.if';
	local $if_or_elif2 = '.elif';
	print OUTPUT $head_part_of_StaticInstancePopulateionBody;
	print OUTPUT2 $head_part_of_StaticManyRelationshipPopulateionBody;

	# $::attrs_tbl ?ã‚Ì‘S‚Ä‚ÌƒIƒuƒWƒFƒNƒg‚É‘Î‚µ‚Ä‚±‚Ì?ˆ—?‚ðŽÀŽ{‚·‚é?B
    my $prefix;
	foreach $prefix ( sort keys %::attrs_tbl ) { # ˆê‰ž ƒ\?[ƒg‚µ‚Ä‚¨‚«‚Ü‚¹‚¤?B
		$prefix =~ /([^_]+)_(.*)/;
		local $domain_key = $1;
		local $class_key = $2;
        local @this_attrs_tbl = @{ $::attrs_tbl{$prefix} };
        print "\nDomain key: == $domain_key ========================================\n" if $debug ;
        print "Class key:  == $class_key  ==\n" if $debug ;

        # $::csv_tbl ‚É prefix ‚ªŒ©‚Â‚©‚ç‚È‚¢?ê?‡‚ÍƒXƒLƒbƒv‚·‚é?B
        unless ( defined $::csv_tbl{$prefix} && defined $::csv_tbl{$prefix}{DOMAIN_NAME} &&
				$::csv_tbl{$prefix}{DOMAIN_NAME} eq $domain_key ) {
            print "Domain '$domain_key' Class Key '$class_key' not found in csv files. skipped.\n";
            next;
        }

		# ƒNƒ‰ƒX‚²‚Æ‚É?¶?¬‚·‚é?B
        &table_generate_per_class( $prefix );

    }

    # ‘«Œ³‚ð?‘‚«?o‚·?B
    print OUTPUT $foot_part_of_StaticInstancePopulateionBody;
	print OUTPUT2 $foot_part_of_StaticManyRelationshipPopulateionBody;

    # ‘S‚Ä‚ª‚¤‚Ü‚­‚¢‚Á‚½‚ç?A
    # $populate_file ‚ðƒoƒbƒNƒAƒbƒv‚µ‚Ä?A
    # ?‘‚«?o‚µ—pˆêŽžƒtƒ@ƒCƒ‹‚ð$populate_file ‚Æ‚·‚é?B
    # $populate_file
    close OUTPUT;
    close OUTPUT2;
	my $real_populate_file = $populate_file;
	if ( $outdir ) {
		$real_populate_file = "$outdir/$populate_file";
	}
	if ( -e $real_populate_file ) {
        unlink( $real_populate_file.".bak" ) if -e $real_populate_file.".bak"; 
		rename( $real_populate_file, $real_populate_file.".bak" ) or die;
	}
	open REAL_OUTPUT, "> $real_populate_file" or die;
    open OUTPUT2, "< $output_file2" or die;
	print REAL_OUTPUT <OUTPUT2>;
	close OUTPUT2;
    open OUTPUT, "< $output_file" or die;
	print REAL_OUTPUT <OUTPUT>;
	close OUTPUT;
	close REAL_OUTPUT;
    unlink( $output_file ); 
    unlink( $output_file2 ); 
}

#############################################################
# ƒNƒ‰ƒX‚²‚Æ‚Ìƒe?[ƒuƒ‹‚Ì?¶?¬?B
#
sub table_generate_per_class {
    my( $prefix ) = @_;

    # ˆÈ‰º‚Ì?ˆ—?‚Ì•Ö‹X‚Ì‚½‚ß‚É?B
    my %this_csv_tbl = %{ $::csv_tbl{$prefix} };
    my @this_attr_tbl = @{ $::attrs_tbl{$domain_key."_".$class_key} };

    # .// StaticInstancePopulateionBody ‚Ì’†?g‚ÌŽn‚Ü‚è
    my $class_extent_size =  $this_csv_tbl{DATA_RECS}; # $#{ $this_csv_tbl{DATA} } + 1;
    my $attr_comment = join( ', ', @this_attrs_tbl );
	my $proto_comment = $comment_tbl{$prefix};
	$proto_comment =~ s/^[ \t]+//;
	$proto_comment =~ s/[\n\r]+$//;

    print "Class extent size: $class_extent_size\n" if $debug;
    print "Attr comment: $attr_comment\n" if $debug;

    print OUTPUT <<EO_HEAD1;
  $if_or_elif (obj.Key_Lett == "$class_key")
    .assign attr_StaticExtentSize = $class_extent_size 
  .///* $attr_comment */
  .//$proto_comment
EO_HEAD1

    $if_or_elif = '.elif';

    # ‘Î‰ž‚·‚é $::cvs_tbl ?ã‚Ì‘S‚Ä‚Ì
    # ƒCƒ“ƒXƒ^ƒ“ƒXƒf?[ƒ^‚ð1?s‚¸‚Â?ˆ—?‚·‚é?B
    for (my $line_no = 0; $line_no < $this_csv_tbl{DATA_RECS}; $line_no++ ) {
    
        local @output_items = ( );

        # 1?s‚¸‚Â‚Ì?ˆ—?
        table_generate_per_class_per_line ( $domain_key, $class_key, $line_no );

        # 1?s‚ÌŒ‹‰Ê‚ð?‘‚«?o‚·?B
        print OUTPUT "  {";
        print OUTPUT join( ', ', @output_items );
        $line_no == ($this_csv_tbl{DATA_RECS}-1) ? print OUTPUT "}" :  print OUTPUT "},";

        # 1?s‚¸‚Â‚ÌƒRƒ?ƒ“ƒg—ñ‚Ì?ˆ—?
        table_comment_generate_per_class_per_line  ( $domain_key, $class_key, $line_no );

        print OUTPUT "\n";
    }
    
    # ƒRƒŒƒNƒVƒ‡ƒ“‚Ì?‘‚«?o‚µ?B
    if ( defined $::collection_part{$prefix} ) {
        foreach my $tr_num ( sort numerically keys %{ $::collection_part{$prefix} } ) {

            $tr_num =~ /R(\d+)/;
			my $rel_num = $1;
            my $rec_no = $#{ $::collection_part{$prefix}{$tr_num} };
            my $attr_MaxExtentSize = $rec_no + 1 ;
            my $attr_StaticExtentSize = $attr_MaxExtentSize;

            print OUTPUT2 <<EO_HEAD2;
  $if_or_elif2 ((obj.Key_Lett == "$class_key") and (rel.Numb == $rel_num))
    .assign attr_MaxExtentSize = $attr_MaxExtentSize
    .assign attr_StaticExtentSize = $attr_MaxExtentSize
EO_HEAD2

        $if_or_elif2 = '.elif';            
            for ( my $i = 0; $i < $rec_no; $i++ ) {
                print OUTPUT2 "${ $::collection_part{$prefix}{$tr_num} }[$i],\n";
            }
            print OUTPUT2 "${ $::collection_part{$prefix}{$tr_num} }[$rec_no]\n";
        }
    }
}

#############################################################
# ƒRƒŒƒNƒVƒ‡ƒ“‚Ì?‘‚«?o‚µ‚ðŠÖ˜A”Ô?†?‡‚É‚·‚é‚½‚ß‚Ì”äŠr—pŠÖ?”
sub numerically {
	my $aa = $a; 
	my $bb = $b;
	$aa =~ s/R(\d+)/$1/;
	$bb =~ s/R(\d+)/$1/;
	$aa <=> $bb;
}

#############################################################
# ‘Î‰ž‚·‚é $::cvs_tbl ?ã‚Ì‘S‚Ä‚Ì
# ƒCƒ“ƒXƒ^ƒ“ƒXƒf?[ƒ^‚ð1?s‚¸‚Â?ˆ—?‚·‚é?B
#
sub table_generate_per_class_per_line {
    my( $domain_key, $class_key, $line_no ) = @_;

    # $::attrs_tbl ?ã‚Ì‚·‚×‚Ä‚Ì‘®?«–¼‚ðˆø‚¢‚Ä‚«‚Ä‚»‚ê‚¼‚ê‚É‚Â‚¢‚Ä?ˆ—?‚·‚é?B
    my @this_attr_tbl = @{ $::attrs_tbl{$domain_key."_".$class_key} };

    for my $i (0 .. $#this_attrs_tbl) {
        # ‘®?«‚²‚Æ‚Ì?ˆ—?
        &table_generate_per_class_per_line_per_attrs
			( $domain_key, $class_key, $line_no, $this_attrs_tbl[$i] );
    }
}

#############################################################
# ˆê?s‚¸‚Â‚ÌƒRƒ?ƒ“ƒg‚ð?‘‚«?o‚·?ˆ—??B
sub table_comment_generate_per_class_per_line {
    my ( $domain_key, $class_key, $line_no ) = @_;
    my %this_csv_tbl = %{ $::csv_tbl{$domain_key."_".$class_key} };

    # csvƒtƒ@ƒCƒ‹‚É‘®?«‚ð•À‚×‚½‚Ì‚Æ“¯‚¶”Ô?†?‡‚É‚È‚ç‚ñ‚¾
    # ‘®?«–¼‚Ì”z—ñ‚ð“¾‚é?B
    my @csv_attr_name_list = get_csv_attr_name_list ( $domain_key, $class_key ); 

    # CSVƒtƒ@ƒCƒ‹?ã‚ÌƒRƒ?ƒ“ƒg—ñ‚ð?‘‚«?o‚·?B
    foreach $attr_name ( @csv_attr_name_list ) {
        if( defined $this_csv_tbl{ATTR_SPEC}{$attr_name}{ATTR_TYPE} ) {
            if ( $this_csv_tbl{ATTR_SPEC}{$attr_name}{ATTR_TYPE} eq "comment" ) {
                my $comment = $this_csv_tbl{ATTR_SPEC}{$attr_name}{ATTR_DATA}[$line_no];
                if ( $comment !~ /^[ \t]*$/ ) {
                    print OUTPUT " /* $comment */ ";
                }
                last;
            }
        }
    }
}

#############################################################
# ‘®?«‚²‚Æ‚Ì?ˆ—?
# ƒCƒ“ƒXƒ^ƒ“ƒXƒf?[ƒ^‚Ì‘Î‰ž‚·‚é?€–Ú‚É‘Î‚µ‚Ä
# ‘Î‰ž‚·‚é$::csv_tbl ‚Ì?€–Ú‚â’l‚ð’²‚×‚é?B
sub table_generate_per_class_per_line_per_attrs {
    my ( $domain_key, $class_key, $line_no, $attrs_attr_name ) = @_;
    my %this_csv_tbl = %{ $::csv_tbl{$domain_key."_".$class_key} };

    if ( defined $this_csv_tbl{ATTR_SPEC}{$attrs_attr_name} ) {
        # (1) “¯‚¶‘®?«–¼‚ª csvƒtƒ@ƒCƒ‹‘¤‚É‚ ‚é‚Æ‚«‚Í?A‚»‚Ì‚Ü‚Ü?‘‚«?o‚·?B
                                                  
        table_generate_per_class_per_line_per_attrs_sub1 ( $domain_key, $class_key, $line_no, $attrs_attr_name  );

    } else { 
        # (2) “¯‚¶‘®?«–¼‚ª csvƒtƒ@ƒCƒ‹‘¤‚É‚È‚¢‚Æ‚«
        # ‚½‚Ô‚ñ mc_B_R1/mc_Rx_subtype/mc_F_R4_Part ‚Ì‚æ‚¤‚È‘®?«–¼‚Ì‚Í‚¸?B

        my ( $target_class_key, $target_rel_number, $target_rel_subscript ) 
            = split_reletion_name ( $attrs_attr_name );

        if ( $target_rel_number eq "" ) {

            # Cƒtƒ@ƒCƒ‹‘¤‚Ì‘®?«‚Éˆê’v‚·‚é‘®?«‚ª csvƒtƒ@ƒCƒ‹‘¤‚ÉŒ©‚Â‚©‚ç‚È‚©‚Á‚½‚Æ‚«
			print "Attribute '$attrs_attr_name' not found"
                ." in csv data(Class '$class_key', Domain '$domain_key').\n" if $line_no == 0; 

			if( has_collection ( $domain_key, $class_key, $attrs_attr_name  ) ){	
				push @output_items, "{0, 0}";
            } elsif ( is_unique_id ( $domain_key, $class_key, $attrs_attr_name  ) ){
				push @output_items, "(Escher_UniqueID_t)0";
			} else {
				push @output_items, "0";
			}
            return;
        }        

        # “¯‚¶‘®?«–¼‚ª csvƒtƒ@ƒCƒ‹‘¤‚É‚È‚¢‚Æ‚«‚Ì?ˆ—?‚Ö?B
        table_generate_per_class_per_line_per_attrs_sub2 
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
    }
}

#############################################################
# ƒ†?[ƒU?[’è‹`‘®?«‚È‚Ç?A‚»‚Ì‚Ü‚Ü?‘‚«?o‚·‘®?«’l‚Ì?ˆ—??B
#
sub table_generate_per_class_per_line_per_attrs_sub1 { 
    my ( $domain_key, $class_key, $line_no, $attrs_attr_name ) = @_;
    my %this_csv_tbl = %{ $::csv_tbl{$domain_key."_".$class_key} };
    my $csv_attr_type = "";

    # TYPE ‚ª‚ ‚é‚©‚Ç‚¤‚©’²‚×‚é?B
    if ( defined $this_csv_tbl{ATTR_SPEC}{$attrs_attr_name}{ATTR_TYPE} ) {
        $csv_attr_type = $this_csv_tbl{ATTR_SPEC}{$attrs_attr_name}{ATTR_TYPE};
    } 

    my $item = $this_csv_tbl{ATTR_SPEC}{$attrs_attr_name}{ATTR_DATA}[$line_no];
    print "(domain, class, attr_name, line_no, item) ="
        ." ($domain_key, $class_key, $attrs_attr_name, $line_no, $item)\n" if $debug;
    
    if ( $csv_attr_type eq "string" ) {
        # csv‚Ìƒf?[ƒ^‚Å‚Í•¶Žš—ñ’†‚Ì'"'‚ª'""'‚É‚È‚Á‚Ä‚¢‚é‚Ì‚Å?A
        # ‚±‚ê‚ðCŒ¾Œê—p‚É'\"'‚É‚·‚é?B
        $item =~ s/\"\"/\\\"/g; 
        push @output_items, "\"$item\"";
        
    } elsif ( $csv_attr_type eq "omap" ) {
        # ‰½‚·‚é‚ñ‚¾‚Á‚¯? ‚Æ‚è‚ ‚¦‚¸?A‚»‚Ì‚Ü‚Ü?‘‚«?o‚·?B
        $item =~ s/\(Escher_UniqueID_t\)//;
        $item =~ s/^[ \t]+//;
        $item =~ s/[ \t]+$//;
        if ( is_unique_id ( $domain_key, $class_key, $attrs_attr_name  ) ) { 
            push @output_items, '(Escher_UniqueID_t)'.$item;
        } else {
            push @output_items, $item;
        }
        
    } else {
        # ‚»‚êˆÈŠO‚Í‚»‚Ì‚Ü‚Ü‚ð?‘‚«?o‚·?B
        $item =~ s/\(Escher_UniqueID_t\)//;
        $item =~ s/^[ \t]+//;
        $item =~ s/[ \t]+$//;
        if ( is_unique_id ( $domain_key, $class_key, $attrs_attr_name  ) ) { 
            push @output_items, '(Escher_UniqueID_t)'.$item;
        } else {
            push @output_items, $item;
        }
    }
}

#############################################################
# “¯‚¶‘®?«–¼‚ª csvƒtƒ@ƒCƒ‹‘¤‚É‚È‚¢‚Æ‚«‚Ì?ˆ—??B
#
sub table_generate_per_class_per_line_per_attrs_sub2 {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
        $target_rel_subscript, $line_no, $attrs_attr_name ) = @_;

    # Ž©•ª‚ÌƒNƒ‰ƒX‚Å?ã‚ÅŽw’è‚µ‚½ŠÖ˜A”Ô?†($target_rel_number)‚ðŽ?‚Â‘®?«‚ð’T‚µ‚Ä”z—ñ‚É‚µ‚Ä•Ô‚·?B
    my @ref_attr 
        = get_ref_info_entries 
            ( $domain_key, $class_key, $target_class_key, $target_rel_number );
    
    if ( scalar(@ref_attr) > 0 ) {
        # Œ©‚Â‚©‚Á‚½?ê?‡‚Í?AŽ©•ª‘¤‚©‚ç‰ðŒˆ‰Â”\?B
        if ( $target_rel_subscript eq 'Part' ) {                
            table_generate_per_class_per_line_per_attrs_sub2_part
                ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
                 $target_rel_subscript, $line_no, $attrs_attr_name );
            
        } elsif ( $target_rel_subscript eq 'Form' ) {
            table_generate_per_class_per_line_per_attrs_sub2_form
                ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
                 $target_rel_subscript, $line_no, $attrs_attr_name );
            
        } elsif ( $target_rel_subscript eq 'Aone' ) {
            table_generate_per_class_per_line_per_attrs_sub2_aone
                ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
                 $target_rel_subscript, $line_no, $attrs_attr_name );
            
        } elsif ( $target_rel_subscript eq 'Aoth' ) {
            table_generate_per_class_per_line_per_attrs_sub2_aoth
                ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
                 $target_rel_subscript, $line_no, $attrs_attr_name );
            
        } else {
            table_generate_per_class_per_line_per_attrs_sub2_other 
                ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
                 $line_no, $attrs_attr_name );
        }  
    } else { 
        # Œ©‚Â‚©‚ç‚È‚¢‚Æ‚«‚Í?A‘ŠŽè‘¤‚©‚ç’²‚×‚È‚¢‚Æƒ_ƒ?‚È?ê?‡?B
        table_generate_per_class_per_line_per_attrs_sub3 
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
    }
    
}

#############################################################
# “¯‚¶‘®?«–¼‚ª csvƒtƒ@ƒCƒ‹‘¤‚É‚È‚¢‚Æ‚«‚Ì?ˆ—??B
# ‘ŠŽè‘¤‚©‚ç’²‚×‚È‚¢‚Æƒ_ƒ?‚È?ê?‡?B
sub table_generate_per_class_per_line_per_attrs_sub3 {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
        $target_rel_subscript, $line_no, $attrs_attr_name ) = @_;

    if ( $target_rel_subscript eq 'Part' ) {                
        table_generate_per_class_per_line_per_attrs_sub3_part
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
        
    } elsif ( $target_rel_subscript eq 'Form' ) {
        table_generate_per_class_per_line_per_attrs_sub3_form
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
        
    } elsif ( $target_rel_subscript eq 'Aone' ) {
        table_generate_per_class_per_line_per_attrs_sub3_aone
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
        
    } elsif ( $target_rel_subscript eq 'Aoth' ) {
        table_generate_per_class_per_line_per_attrs_sub3_aoth
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
        
    } elsif ( $target_rel_subscript eq 'subtype' ) {
        table_generate_per_class_per_line_per_attrs_sub3_subtype
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
        
    } elsif ( $target_rel_subscript eq 'object_id' ) {
        table_generate_per_class_per_line_per_attrs_sub3_object_id
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $target_rel_subscript, $line_no, $attrs_attr_name );
        
    } else {
        table_generate_per_class_per_line_per_attrs_sub3_other 
            ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
             $line_no, $attrs_attr_name );
    }  
}

#############################################################
# Ž©•ª‘¤‚©‚ç‰ðŒˆ‚·‚é‚±‚Æ‚ª‚Å‚«‚é
# ’Pˆê‚©•¡?‡ŽQ?Æ‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
sub table_generate_per_class_per_line_per_attrs_sub2_other {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
        $line_no, $attrs_attr_name  ) = @_;

    print "Other(2): $attrs_attr_name\n" if $debug;

    # Ž©•ª‘¤‚Ì‘®?«”z—ñ‚É‘Î‰ž‚·‚é—ñ‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
    my @my_items = get_my_items 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no );
    
    # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
    my @target_items_list = get_target_items_list 
        ( $domain_key, $class_key, $target_class_key, $target_rel_number ); 
    
    # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
    my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );
    
    # ŠÖ˜Aƒ|ƒCƒ“ƒ^‚âƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
    write_pointers_and_collections 
        ( $domain_key, $class_key, $target_class_key, 
         $attrs_attr_name, $target_rel_number, \@matched_lines );
    
    return;
}

#############################################################
# ‘ŠŽè‘¤‚©‚ç‰ðŒˆ‚·‚é’Pˆê‚©•¡?‡ŽQ?Æ‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_other {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number, 
        $line_no, $attrs_attr_name  ) = @_;

    print "Other(3): $attrs_attr_name\n" if $debug;

    # Ž©•ª‘¤‚Ì‘®?«”z—ñ‚É‘Î‰ž‚·‚é—ñ‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
    my @my_items = get_my_items_reverse 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no );
    
    # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
    my @target_items_list = get_target_items_list_reverse 
        ( $domain_key, $class_key, $target_class_key, $target_rel_number, $line_no ); 
    
    # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
    my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );
    
    # ŠÖ˜Aƒ|ƒCƒ“ƒ^‚âƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
    write_pointers_and_collections 
        ( $domain_key, $class_key, $target_class_key, 
         $attrs_attr_name, $target_rel_number, \@matched_lines );
    
    return;
}

#############################################################
# Ž©•ª‘¤‚©‚ç‰ðŒˆ‚·‚é‚±‚Æ‚ª‚Å‚«‚é
# Ž©ŒÈŽQ?Æ‚ÌPart‘¤‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
sub table_generate_per_class_per_line_per_attrs_sub2_part {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Part(2): $attrs_attr_name\n" if $debug;

    table_generate_per_class_per_line_per_attrs_sub2_other 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no, $attrs_attr_name );

    return; 
}


#############################################################
# ‘ŠŽè‘¤‚©‚ç‰ðŒˆ‚·‚éŽ©ŒÈŽQ?Æ‚ÌPart‘¤‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_part {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Part(3): $attrs_attr_name\n" if $debug;

    table_generate_per_class_per_line_per_attrs_sub3_other 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no, $attrs_attr_name );

    return; 
}

#############################################################
# Ž©•ª‘¤‚©‚ç‰ðŒˆ‚·‚é‚±‚Æ‚ª‚Å‚«‚é
# Ž©ŒÈŽQ?Æ‚ÌForm‘¤‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
sub table_generate_per_class_per_line_per_attrs_sub2_form {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Form(2): $attrs_attr_name\n" if $debug;

    # ‘ŠŽè‘¤‚©‚çŒ©‚½Ž©•ª‚ÌƒNƒ‰ƒX‚Ì‘®?«‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
    my @my_items = get_my_items_reverse 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no );

    # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
    my @target_items_list = get_target_items_list_reverse 
        ( $domain_key, $class_key, $target_class_key, $target_rel_number, $line_no ); 

    # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
    my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );
    
    # ŠÖ˜Aƒ|ƒCƒ“ƒ^‚âƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
    write_pointers_and_collections 
        ( $domain_key, $class_key, $target_class_key, 
         $attrs_attr_name, $target_rel_number, \@matched_lines );
    
    return; 
}

#############################################################
# ‘ŠŽè‘¤‚©‚ç‰ðŒˆ‚·‚éŽ©ŒÈŽQ?Æ‚ÌForm‘¤‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_form {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Form(3): $attrs_attr_name\n" if $debug;

    table_generate_per_class_per_line_per_attrs_sub2_form
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no, $attrs_attr_name );
    
    return; 
}

#############################################################
# Ž©•ª‘¤‚©‚ç‰ðŒˆ‚·‚é‚±‚Æ‚ª‚Å‚«‚éŽQ?Æ‚ÌAone‘¤‚Ì
# ŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
sub table_generate_per_class_per_line_per_attrs_sub2_aone {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Aone(2): $attrs_attr_name\n" if $debug;

    # Ž©•ª‘¤‚Ì‘®?«”z—ñ‚É‘Î‰ž‚·‚é—ñ‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
    my @my_items = get_my_items 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no );

    # 2‚Â‚ß‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
    splice @my_items, 2; 
    splice @my_items, 0, 1; 
    
    # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
    my @target_items_list = get_target_items_list 
        ( $domain_key, $class_key, $target_class_key, $target_rel_number ); 

    for my $j (0 .. $#target_items_list) { 
        # 2‚Â‚ß‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
        splice @{ $target_items_list[$j] }, 2; 
        splice @{ $target_items_list[$j] }, 0, 1; 
    }

    # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
    my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );
    
    # ŠÖ˜Aƒ|ƒCƒ“ƒ^‚âƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
    write_pointers_and_collections 
        ( $domain_key, $class_key, $target_class_key, 
         $attrs_attr_name, $target_rel_number, \@matched_lines );
    
    return; 
}

#############################################################
# ‘ŠŽè‘¤‚©‚ç‰ðŒˆ‚·‚éŽ©ŒÈŽQ?Æ‚ÌAoth‘¤‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_aoth {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Aoth(3): $attrs_attr_name\n" if $debug;

    # ‘ŠŽè‘¤‚©‚çŒ©‚½Ž©•ª‚ÌƒNƒ‰ƒX‚Ì‘®?«‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
    my @my_items = get_my_items_reverse 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no );

    # 2‚Â‚ß‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
    splice @my_items, 2; 
    splice @my_items, 0, 1; 

    # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
    my @target_items_list = get_target_items_list_reverse 
        ( $domain_key, $class_key, $target_class_key, $target_rel_number, $line_no ); 

    for my $j (0 .. $#target_items_list) { 
        # 2‚Â‚ß‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
        splice @{ $target_items_list[$j] }, 2; 
        splice @{ $target_items_list[$j] }, 0, 1; 
    }

    # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
    my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );
    
    # ŠÖ˜Aƒ|ƒCƒ“ƒ^‚âƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
    write_pointers_and_collections 
        ( $domain_key, $class_key, $target_class_key, 
         $attrs_attr_name, $target_rel_number, \@matched_lines );
    
    return; 
}

#############################################################
# Ž©•ª‘¤‚©‚ç‰ðŒˆ‚·‚é‚±‚Æ‚ª‚Å‚«‚éŽQ?Æ‚ÌAoth‘¤‚Ì
# ŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
sub table_generate_per_class_per_line_per_attrs_sub2_aoth {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Aoth(2): $attrs_attr_name\n" if $debug;

    # Ž©•ª‘¤‚Ì‘®?«”z—ñ‚É‘Î‰ž‚·‚é—ñ‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
    my @my_items = get_my_items 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no );

    # ?Å?‰‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
    splice @my_items, 1; 
    
    # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
    my @target_items_list = get_target_items_list
        ( $domain_key, $class_key, $target_class_key, $target_rel_number ); 

    for my $j (0 .. $#target_items_list) { 
        # ?Å?‰‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
        splice @{ $target_items_list[$j] }, 1; 
    }

    # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
    my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );
    
    # ŠÖ˜Aƒ|ƒCƒ“ƒ^‚âƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
    write_pointers_and_collections 
        ( $domain_key, $class_key, $target_class_key, 
         $attrs_attr_name, $target_rel_number, \@matched_lines );
    
    return; 
}

#############################################################
# ‘ŠŽè‘¤‚©‚ç‰ðŒˆ‚·‚éŽ©ŒÈŽQ?Æ‚ÌAone‘¤‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^“™‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_aone {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "Aone(3): $attrs_attr_name\n" if $debug;

    # ‘ŠŽè‘¤‚©‚çŒ©‚½Ž©•ª‚ÌƒNƒ‰ƒX‚Ì‘®?«‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
    my @my_items = get_my_items_reverse 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $line_no );

    # ?Å?‰‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
    splice @my_items, 1; 

    # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
    my @target_items_list = get_target_items_list_reverse 
        ( $domain_key, $class_key, $target_class_key, $target_rel_number, $line_no ); 

    for my $j (0 .. $#target_items_list) { 
        # ?Å?‰‚ÉŒ©‚Â‚©‚Á‚½—v‘f‚¾‚¯‚ðŽc‚·?B
        splice @{ $target_items_list[$j] }, 1; 
    }

    # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
    my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );
    
    # ŠÖ˜Aƒ|ƒCƒ“ƒ^‚âƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
    write_pointers_and_collections 
        ( $domain_key, $class_key, $target_class_key, 
         $attrs_attr_name, $target_rel_number, \@matched_lines );
    
    return; 
}

#############################################################
# Œp?³ŠÖŒW‚Ìsubtype‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_subtype {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "subtype(3): $attrs_attr_name\n" if $debug;

    table_generate_per_class_per_line_per_attrs_sub3_sup 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $target_rel_subscript, 
         $line_no, $attrs_attr_name );

    return; 
}

#############################################################
# Œp?³ŠÖŒW‚Ìobject_id‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_object_id {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;

    print "object_id(3): $attrs_attr_name\n" if $debug;

    table_generate_per_class_per_line_per_attrs_sub3_sup 
        ( $domain_key, $class_key, $target_class_key, 
         $target_rel_number, $target_rel_subscript, 
         $line_no, $attrs_attr_name );

    return; 
}

#############################################################
# Œp?³ŠÖŒW‚Ìsubtype‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^/object_id‚ð?¶?¬‚·‚é?B
#
sub table_generate_per_class_per_line_per_attrs_sub3_sup {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $target_rel_subscript, 
        $line_no, $attrs_attr_name ) = @_;
    
    print "sup(3): $attrs_attr_name\n" if $debug;

    # $class_key_$target_rel_number ‚ð‘®?«–¼‚Æ‚µ‚ÄŽ?‚ÂƒNƒ‰ƒX‚ð’T‚·?B
  SS: 
    foreach my $sub_class_key ( keys %::csv_tbl ) {
        my %target_csv_tbl = %{ $::csv_tbl{$sub_class_key} };
        $target_class_key = $sub_class_key;
        $target_class_key =~ s/$domain_key[_]//;
      RR: 
        foreach my $attr ( keys %{ $target_csv_tbl{ATTR_SPEC} } ) {
            if ( defined $target_csv_tbl{ATTR_SPEC}{$attr}{REL_ARRAY} ) {
                @rel_array = @{ $target_csv_tbl{ATTR_SPEC}{$attr}{REL_ARRAY} };
                foreach $rel_entry ( @rel_array ) {
                    if ( $rel_entry->{REL_KEY} eq $class_key 
                        && $rel_entry->{REL_NUMBER} eq $target_rel_number )  {
                        # $class_key_$target_rel_number ‚ð‘®?«‚Æ‚µ‚ÄŽ?‚ÂƒNƒ‰ƒX‚ª‚Ý‚Â‚©‚Á‚½?B

                        # Œp?³Žž‚É•¡?‡Ž¯•ÊŽq‚ðŽg—p‚µ‚Ä‚¢‚é?ê?‡‚Í?A?ç’·‚Æ‚È‚é‚Ì‚ð”ð‚¯‚é‚½‚ß‚É
                        # ƒXƒPƒ‹ƒgƒ“‚É‚Í“¯‚¶ŠÖŒW‚É‘Î‚µ‚Ä1‘g‚Ìƒ|ƒCƒ“ƒ^‚ÆID‚µ‚©?¶?¬‚µ‚È‚¢?B
                        # ‚±‚Ì‚±‚Æ‚É‘Î‰ž‚·‚é‚½‚ß?A‘®?«–¼‚ªˆÙ‚È‚Á‚Ä‚¢‚Ä‚àƒhƒ?ƒCƒ“/ƒNƒ‰ƒX/ŠÖŒW‚ª
                        # “¯‚¶?ê?‡‚ðƒ`ƒFƒbƒN‚µ?A‚·‚Å‚É?¶?¬‚µ‚Ä‚¢‚é?ê?‡‚Í?¶?¬‚µ‚È‚¢‚æ‚¤?C?³?B
                        my $save_key = join ':'
                            ,$domain_key,$class_key,$target_class_key
                                ,$target_rel_number,$target_rel_subscript,$line_no;

                        if( !defined($subtype_key_tbl{$save_key}) ) {
                            $subtype_key_tbl{$save_key}= "t";

                            # ‘ŠŽè‘¤‚©‚çŒ©‚½Ž©•ª‚ÌƒNƒ‰ƒX‚Ì‘®?«‚ÌŒ»?Ý?s‚Ì’l‚ðŽæ“¾‚·‚é?B
                            my @my_items = get_my_items_reverse 
                                ( $domain_key, $class_key, $target_class_key, 
                                 $target_rel_number, $line_no );
                            
                            # ‘ŠŽè‘¤‚Ì’l‚ð?‡ŽŸŽæ“¾‚·‚é?B
                            my @target_items_list = get_target_items_list_reverse 
                                ( $domain_key, $class_key, $target_class_key, $target_rel_number, $line_no ); 

                            # Ž©•ª‚Æ‘ŠŽè‚ð”äŠr‚·‚é?B
                            my @matched_lines = get_matched_lines ( \@my_items, \@target_items_list );

                            if ( $target_rel_subscript eq 'subtype' ) {
                                if ( scalar(@matched_lines) > 0 ) {
                                    # ˆê’v‚·‚é’l‚ª‚ ‚Á‚½?BŠÖ˜Aƒ|ƒCƒ“ƒ^‚Ì?‘‚«?o‚µ?B
                                    
                                    # ‚±‚±‚Å‚Í?A$sub_class_key ‚ª (domain_key)_(class_key) ‚É‚ ‚½‚é?B
                                    push @output_items
                                        ,"(void *)&".$sub_class_key."_ObjectPool_s[".$matched_lines[0]."]";										
                                } else {
                                    # ˆê’v‚·‚é’l‚ª‚È‚©‚Á‚½?B
                                    # push @output_items, "(void *)0";
                                }
                            } elsif ( $target_rel_subscript eq 'object_id' ) {
                                
                                if ( scalar(@matched_lines) > 0 ) {
                                    # ˆê’v‚·‚é’l‚ª‚ ‚Á‚½?BŠÖ˜Aƒ|ƒCƒ“ƒ^‚Ì?‘‚«?o‚µ?B
                                    
                                    # ID ‚ÌŒ`Ž®‚Í?A(domain_key)_(class_key)_OBJECT_ID
                                    # ‚±‚±‚Å‚Í?A$sub_class_key ‚ª (domain_key)_(class_key) ‚É‚ ‚½‚é?B
                                    push @output_items
                                        , $sub_class_key."_OBJECT_ID";
                                    
                                } else {
                                    # ˆê’v‚·‚é’l‚ª‚È‚©‚Á‚½?B
                                    # push @output_items, "0";
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return; 
}


#############################################################
# mc_B_R1/mc_Rx_subtype/mc_F_R4_Part ‚Ì‚æ‚¤‚È‘®?«–¼‚ð•ª‰ð‚µ‚Ä?A
# ƒNƒ‰ƒX–¼?AŠÖŒW”Ô?†?AŠÖŒW”Ô?†‚É•t??‚·‚é?î•ñ–¼‚É‚µ‚Ä•Ô‚·?B
sub split_reletion_name {
    my ( $attrs_attr_name ) = @_;
    my $class_key = "";
    my $rel_number = ""; 
    my $rel_subscript= "";

    if ( $attrs_attr_name  =~ /mc_(.*)_(R\d+)_(.*)/ ) {        
        # ƒ^ƒCƒvC ( mc_F_R4_Part ‚È‚Ç )
        $class_key = $1;
        $rel_number = $2;
        $rel_subscript = $3;
        
    } elsif ( $attrs_attr_name  =~ /mc_(R\d+)_(.*)/ ) {
        # ƒ^ƒCƒvB ( mc_Rx_subtype ‚È‚Ç )
        $rel_number = $1;
        $rel_subscript = $2;
        
    } elsif( $attrs_attr_name  =~ /mc_(.*)_(R\d+)/ ) {
        # ƒ^ƒCƒvA ( mc_B_R1 ‚È‚Ç )
        $class_key = $1;
        $rel_number = $2;
    }        

    return ( $class_key, $rel_number, $rel_subscript );
}
        
#############################################################
# csvƒtƒ@ƒCƒ‹‚ÌŽ©•ª‚ÌƒNƒ‰ƒX‚Ì‘®?«’†‚Å?A
# Žw’è‚µ‚½‘ŠŽèƒNƒ‰ƒXƒL?[•¶Žš—ñ‚ÆŽw’è‚µ‚½ŠÖ˜A”Ô?†‚ð•ÛŽ?‚µ‚Ä‚¢‚é‘®?«‚ð’T‚·?B
# Œ‹‰Ê‚Æ‚µ‚Ä?AŠY“–‚·‚éŽ©•ª‚ÌƒNƒ‰ƒX‚Ì‘®?«–¼‚Ì”z—ñ‚ð•Ô‚·?B
sub get_ref_info_entries {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number ) = @_;
    my @attr_names = ( );
    my %this_csv_tbl = %{ $::csv_tbl{$domain_key."_".$class_key} };

    # csvƒtƒ@ƒCƒ‹‚É‘®?«‚ð•À‚×‚½‚Ì‚Æ“¯‚¶”Ô?†?‡‚É‚È‚ç‚ñ‚¾
    # ‘®?«–¼‚Ì”z—ñ‚ð“¾‚é?B
    my @csv_attr_name_list = get_csv_attr_name_list ( $domain_key, $class_key ); 

    # ‘®?«–¼‚ÌƒŠƒXƒg?‡‚É‘®?«‚ð’²‚×‚é?B
    for ( my $i = 0; $i <= $#csv_attr_name_list; $i++ ) {
        my $attr = $csv_attr_name_list[$i];
        if ( defined $this_csv_tbl{ATTR_SPEC}{$attr}{REL_ARRAY} ) {
            # ŠÖ˜A?î•ñƒGƒ“ƒgƒŠ‚ðŽ?‚Á‚Ä‚¢‚½?B
            foreach my $rel_entry ( @{ $this_csv_tbl{ATTR_SPEC}{$attr}{REL_ARRAY} } ) {
                # ŽQ?Æ‘®?«‚Ì‹L?q‚ðŽ?‚Á‚Ä‚¢‚é‚©ƒ`ƒFƒbƒN‚·‚é?B
                if ( $target_class_key eq $rel_entry->{REL_KEY}
                    && $target_rel_number eq $rel_entry->{REL_NUMBER} ) {
                    # ŠY“–‚·‚é‘®?«‚ª‚Ý‚Â‚©‚Á‚½?B
                    push @attr_names, $attr;
                }
            }
        }
    }
    return @attr_names;
}

#############################################################
# csvƒtƒ@ƒCƒ‹‚Ì‘ŠŽè‚ÌƒNƒ‰ƒX‚Ì‘®?«’†‚Å?A
# Ž©•ª‚ÌƒNƒ‰ƒXƒL?[•¶Žš—ñ‚ÆŽw’è‚µ‚½ŠÖ˜A”Ô?†‚ð•ÛŽ?‚µ‚Ä‚¢‚é‘®?«‚ð’T‚·?B
# Œ‹‰Ê‚Æ‚µ‚Ä?AŠY“–‚·‚éŽ©•ª‚ÌƒNƒ‰ƒX‚Ì‘®?«–¼‚Ì”z—ñ‚ð•Ô‚·?B
sub get_ref_info_entries_reverse {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number ) = @_;
    my @attr_names = ( );
    unless ( defined $::csv_tbl{$domain_key."_".$target_class_key} ) {
        return;
    }
    my %this_csv_tbl = %{ $::csv_tbl{$domain_key."_".$target_class_key} };

    # csvƒtƒ@ƒCƒ‹‚É‘®?«‚ð•À‚×‚½‚Ì‚Æ“¯‚¶”Ô?†?‡‚É‚È‚ç‚ñ‚¾
    # ‘®?«–¼‚Ì”z—ñ‚ð“¾‚é?B
    my @csv_attr_name_list = get_csv_attr_name_list ( $domain_key, $target_class_key ); 

    # ‘®?«–¼‚ÌƒŠƒXƒg?‡‚É‘®?«‚ð’²‚×‚é?B
    for ( my $i = 0; $i <= $#csv_attr_name_list; $i++ ) {
        my $attr = $csv_attr_name_list[$i];
        if ( defined $this_csv_tbl{ATTR_SPEC}{$attr}{REL_ARRAY} ) {
            # ŠÖ˜A?î•ñƒGƒ“ƒgƒŠ‚ðŽ?‚Á‚Ä‚¢‚½?B
            foreach my $rel_entry ( @{ $this_csv_tbl{ATTR_SPEC}{$attr}{REL_ARRAY} } ) {
                # ŽQ?Æ‘®?«‚Ì‹L?q‚ðŽ?‚Á‚Ä‚¢‚é‚©ƒ`ƒFƒbƒN‚·‚é?B
                if ( $class_key eq $rel_entry->{REL_KEY}
                    && $target_rel_number eq $rel_entry->{REL_NUMBER} ) {
                    # ŠY“–‚·‚é‘®?«‚ª‚Ý‚Â‚©‚Á‚½?B
                    #     push @attr_names, $attr;
                    # •Ô‚·‚Ì‚Í?AŽw‚µ‚Ä‚¢‚éŽ©•ª‘¤‚ÌƒNƒ‰ƒX‚Ì‘®?«‚Ì–¼‘O
                    push @attr_names, $rel_entry->{REL_TARGET};
                }
            }
        }
    }
    return @attr_names;
}

#############################################################
# csvƒtƒ@ƒCƒ‹‚ÌŽ©•ª‘¤‚ÌƒNƒ‰ƒX‚ÌŒ»?Ý?s‚Ìƒf?[ƒ^‚ð’²‚×‚Ä?A
# —^‚¦‚ç‚ê‚½‘®?«–¼”z—ñ‚É‘Î‰ž‚·‚éŒ»?Ý?s‚Ìƒf?[ƒ^”z—ñ‚ð•Ô‚·?B
sub get_my_items {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $line_no ) = @_;
    my @my_items = ( );
    my %this_csv_tbl = %{ $::csv_tbl{$domain_key."_".$class_key} };

    # Ž©•ª‚ÌƒNƒ‰ƒX‚Å?ã‚Å’Š?o‚µ‚½ŠÖ˜A”Ô?†($target_rel_number)‚ðŽ?‚Â
    # ‘®?«‚ð’T‚µ‚Ä”z—ñ‚É‚µ‚Ä•Ô‚·?B
    my @ref_attr = get_ref_info_entries 
            ( $domain_key, $class_key, $target_class_key, $target_rel_number );

    for my $i ( 0 .. $#ref_attr ) { # ‘®?«‚È‚ç‚Ñ
        $my_items[$i] 
            = $this_csv_tbl{ATTR_SPEC}{ $ref_attr[$i] }{ATTR_DATA}[$line_no];
        $my_items[$i] =~ s/\(Escher_UniqueID_t\)//;
        $my_items[$i] =~ s/^[ \t]+//;
        $my_items[$i] =~ s/[ \t]+$//;
        print "my_items[$i] = $my_items[$i]\n" if $debug;
    }
    return @my_items;
}

#############################################################
# csvƒtƒ@ƒCƒ‹‚Ì‘ŠŽè‘¤‚ÌƒNƒ‰ƒX‚ð’²‚×‚Ä?A
# ‘ŠŽè‘¤‚ªŽw‚µ‚Ä‚¢‚éŽ©•ª‘¤‚ÌƒNƒ‰ƒX‚Ì‘®?«–¼”z—ñ‚É‘Î‰ž‚·‚éŒ»?Ý?s‚Ìƒf?[ƒ^”z—ñ‚ð•Ô‚·?B
sub get_my_items_reverse {
    my ( $domain_key, $class_key, $target_class_key, 
        $target_rel_number, $line_no ) = @_;
    my @my_items = ( );
    my %target_csv_tbl = %{ $::csv_tbl{$domain_key."_".$class_key} };

    # ’Š?o‚µ‚½Ž©•ª‚ÌƒNƒ‰ƒX–¼‚ÆŠÖ˜A”Ô?†($target_rel_number)‚ðŽ?‚Â
    # ‘ŠŽè‚ÌƒNƒ‰ƒX‚Å?ã‚Ì‘®?«‚ð’T‚µ‚Ä‚»‚ê‚ªŽw‚·Ž©•ª‘¤‚Ì‘®?«’l‚ð”z—ñ‚É‚µ‚Ä•Ô‚·?B
    my @ref_attr = get_ref_info_entries_reverse 
            ( $domain_key, $class_key, $target_class_key, $target_rel_number );

    for my $i ( 0 .. $#ref_attr ) { # ‘®?«‚È‚ç‚Ñ
        $my_items[$i] 
            = $target_csv_tbl{ATTR_SPEC}{ $ref_attr[$i] }{ATTR_DATA}[$line_no];
        $my_items[$i] =~ s/\(Escher_UniqueID_t\)//;
        $my_items[$i] =~ s/^[ \t]+//;
        $my_items[$i] =~ s/[ \t]+$//;
        print "my_items(r)[$i] = $my_items[$i]\n" if $debug;
    }
    return @my_items;
}

#############################################################
# csvƒtƒ@ƒCƒ‹‚Ì‘ŠŽè‘¤‚ÌƒNƒ‰ƒX‚Ìƒf?[ƒ^‚ð‘S?s’²‚×‚Ä?A
# Ž©•ª‘¤‚Å—^‚¦‚ç‚ê‚Ä‚¢‚é‘ŠŽè‘¤‚ÌƒNƒ‰ƒX?E‘®?«‚É‘Î‰ž‚·‚éƒf?[ƒ^‚ð”z—ñ‚Æ‚µ‚Ä•Ô‚·?B
sub get_target_items_list {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number ) = @_;
    my @target_items_list = ( );
    my %this_csv_tbl = %{ $::csv_tbl{ $domain_key."_".$class_key } };
    unless ( defined $::csv_tbl{ $domain_key."_".$target_class_key } ) {
        # print "Class '$target_class_key' not found in csv data( Domain '$domain_key').\n";
        return @target_items_list;
    }
    my %target_csv_tbl = %{ $::csv_tbl{ $domain_key."_".$target_class_key } };

    # Ž©•ª‚ÌƒNƒ‰ƒX‚Å?ã‚Å’Š?o‚µ‚½ŠÖ˜A”Ô?†($target_rel_number)‚ðŽ?‚Â‘®?«‚ð’T‚µ‚Ä”z—ñ‚É‚µ‚Ä•Ô‚·?B
    my @ref_attr = get_ref_info_entries 
            ( $domain_key, $class_key, $target_class_key, $target_rel_number );

    # ‚Ü‚¸?A‘ŠŽè‚ÌƒNƒ‰ƒX‚Ì‚Ç‚Ì‘®?«‚ðˆø‚­‚Ì‚©‚ð’²‚×‚é?B
    for my $i ( 0 .. $#ref_attr ) { # ‘®?«‚È‚ç‚Ñ
        my $attr = $ref_attr[$i];
        my @rel_array = @{ $this_csv_tbl{ATTR_SPEC}{$attr}{REL_ARRAY} };
        foreach $rel_entry ( @rel_array ) {
            if ( $rel_entry->{REL_KEY} eq $target_class_key 
                && $rel_entry->{REL_NUMBER} eq $target_rel_number )  {
                # ‘ŠŽèƒNƒ‰ƒX‚ÌŽQ?Æ‘®?«‚ª‚Ý‚Â‚©‚Á‚½?B
                my @items = ( );
                if ( defined @{ $target_csv_tbl{ATTR_SPEC}{$rel_entry->{REL_TARGET}}{ATTR_DATA} } ) {
                    @items = @{ $target_csv_tbl{ATTR_SPEC}{$rel_entry->{REL_TARGET}}{ATTR_DATA} };
                }

                for $j ( 0 .. $#items ) { # ƒf?[ƒ^?s‚È‚ç‚Ñ
                    $items[$j] =~ s/\(Escher_UniqueID_t\)//;
                    $items[$j] =~ s/^[ \t]+//;
                    $items[$j] =~ s/[ \t]+$//;
                    $target_items_list[$j][$i] = $items[$j];
                    print "target_items[$j][$i] = $target_items_list[$j][$i]\n" if $debug;
                }
            }
        }
    }

    return @target_items_list;
}

#############################################################
# csvƒtƒ@ƒCƒ‹‚Ì‘ŠŽè‘¤‚ÌƒNƒ‰ƒX‚ð’²‚×‚Ä?A
# ‘ŠŽè‘¤‚ªŽw‚µ‚Ä‚¢‚éŽ©•ª‘¤‚ÌƒNƒ‰ƒX?E‘®?«–¼”z—ñ‚É‘Î‰ž‚·‚é‘ŠŽè‘¤‚Ìƒf?[ƒ^”z—ñ‚ð•Ô‚·?B
sub get_target_items_list_reverse {
    my ( $domain_key, $class_key, $target_class_key, $target_rel_number, $line_no ) = @_;
    my @target_items_list = ( );
    my %this_csv_tbl = %{ $::csv_tbl{ $domain_key."_".$class_key } };
    unless ( defined $::csv_tbl{ $domain_key."_".$target_class_key } ) {
        # print "Class '$target_class_key' not found in csv data( Domain '$domain_key').\n";
        return @target_items_list;
    }
    my %target_csv_tbl = %{ $::csv_tbl{ $domain_key."_".$target_class_key } };

    # ‘ŠŽè‚ÌƒNƒ‰ƒX‚Å?ã‚Å’Š?o‚µ‚½ŠÖ˜A”Ô?†($target_rel_number)‚ðŽ?‚Â‘®?«‚ð’T‚µ‚Ä”z—ñ‚É‚µ‚Ä•Ô‚·?B
    my @ref_attr = get_ref_info_entries
            ( $domain_key, $target_class_key, $class_key, $target_rel_number );

    if ( scalar ( @ref_attr ) <= 0 ) {
        # ‘ŠŽè‘¤‚ÌƒNƒ‰ƒX‚É?A’T‚µ‚Ä‚¢‚éŠÖ˜A”Ô?†‚ÆŽ©•ª‘¤‚ÌƒNƒ‰ƒXƒL?[•¶Žš‚Ì‘g‚ð
        # ‚à‚Â‘®?«‚ªŒ©‚Â‚©‚ç‚È‚©‚Á‚½‚Æ‚«
        print "Reversed relation '$target_rel_number(Class '$class_key')' not found"
            ." in csv data(Class '$target_class_key', Domain '$domain_key').\n" if $line_no == 0;
        return @target_items_list;
    } 
    # ‚Ü‚¸?AŽ©•ª‚ÌƒNƒ‰ƒX‚Ì‚Ç‚Ì‘®?«‚ðˆø‚­‚Ì‚©‚ð’²‚×‚é?B
    for my $i ( 0 .. $#ref_attr ) { # ‘®?«‚È‚ç‚Ñ
        my $attr = $ref_attr[$i];
        my @items = ( );
        if ( defined @{ $target_csv_tbl{ATTR_SPEC}{$attr}{ATTR_DATA} } ) {
            @items = @{ $target_csv_tbl{ATTR_SPEC}{$attr}{ATTR_DATA} };
        }
        
        for $j ( 0 .. $#items ) { # ƒf?[ƒ^?s‚È‚ç‚Ñ
            $items[$j] =~ s/\(Escher_UniqueID_t\)//;
            $items[$j] =~ s/^[ \t]+//;
            $items[$j] =~ s/[ \t]+$//;
            $target_items_list[$j][$i] = $items[$j];
            print "target_items(r)[$j][$i] = $target_items_list[$j][$i]\n" if $debug;
        }
    }

    return @target_items_list;
}

#############################################################
# Ž©•ª‘¤‚ÌƒNƒ‰ƒX‚Æ‘ŠŽè‘¤‚ÌƒNƒ‰ƒX‚Ì’Š?oƒf?[ƒ^‚ð’²‚×‚Ä?A
# ƒ}ƒbƒ`‚µ‚Ä‚¢‚é?ê?‡‚Ì‘ŠŽè‘¤ƒNƒ‰ƒX‚Ìƒf?[ƒ^‚Ì?s”Ô?†‚ð”z—ñ‚Æ‚µ‚Ä•Ô‚·?B
sub get_matched_lines {
    my ( $ref_my_items, $ref_target_items_list ) = @_;
    my @matched_lines = ( );

  LJ: # ƒf?[ƒ^?s•ûŒü
    for my $j (0 .. $#{ @$ref_target_items_list }) { 
      LI: # ‘®?«•ûŒü
        for my $i (0 .. $#{ @$ref_my_items }) { 

            print "(my_items[$i], target_items_list[$j][$i])"
                ." = ($ref_my_items->[$i], $ref_target_items_list->[$j][$i])\n" 
                    if $debug;

            # ‘®?«’l‚ªˆÙ‚È‚Á‚Ä‚¢‚½‚çŽŸ‚Ìƒf?[ƒ^?s‚Ö?B
            next LJ if ( $ref_my_items->[$i] ne $ref_target_items_list->[$j][$i] );

            # ‘®?«’l‚ªˆê’v‚µ‚½‚Ì‚ÅŽŸ‚Ì‘®?«—ñ‚Ö?B
            next;
        }
        
        # ‚±‚Ì?s‚Ì‘S‚Ä‚Ì‘®?«‚ÌŽQ?Æ’l‚ªˆê’v‚µ‚½(?‘‚«?o‚·‘Î?Û)?B
        print "matched! target_line : $j\n" if $debug;
        push @matched_lines, $j;
    }

    return @matched_lines;
}

#############################################################
# ŠÖ˜Aƒ|ƒCƒ“ƒ^‚â?‘‚«?o‚·?B
# ƒRƒŒƒNƒVƒ‡ƒ“‚ª‚ ‚é?ê?‡‚Í’~?Ï‚µ‚Ä‚¨‚­?B
sub write_pointers_and_collections {
    my ( $domain_key, $class_key, $target_class_key, 
        $attrs_attr_name, $target_rel_number, $ref_matched_lines ) = @_;
    my $prefix = $domain_key."_".$class_key;

    if( has_collection ( $domain_key, $class_key, $attrs_attr_name  ) ){	
        # ƒRƒŒƒNƒVƒ‡ƒ“‚ª‚ ‚é?ê?‡?B
        
        if ( scalar(@$ref_matched_lines) > 0 ) {
            # ˆê’v‚·‚é’l‚ª‚ ‚Á‚½?BƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
            my $link = "";
            my $j = 0;
            for my $i (0 .. $#{ $ref_matched_lines }) {
                $j = $#{ $::collection_part{$prefix}{$target_rel_number}};
                $link = "&".$prefix."_".$target_class_key
                    ."_".$target_rel_number."_node1s[".($j < 0 ? 0 : $j)."]";  
                $link = "0"." " x (length($link)-1) if $i == 0; 

                # ƒRƒŒƒNƒVƒ‡ƒ“‚ð?‘‚«?o‚·?B
                push @{ $::collection_part{$prefix}{$target_rel_number} },  
                "  {$link, (void *)&".$domain_key."_".$target_class_key
                    ."_ObjectPool_s[$ref_matched_lines->[$i]]}";
            }

            # ƒRƒŒƒNƒVƒ‡ƒ“‚Ö‚ÌŠÖ˜Aƒ|ƒCƒ“ƒ^‚Ì?‘‚«?o‚µ?B
            $link = "&".$prefix."_".$target_class_key."_".$target_rel_number
                ."_node1s[$#{ $::collection_part{$prefix}{$target_rel_number} }]";                  
            #push @output_items, "{$link, 0}";                     
            #?«MC-3020 3.0—p‚Ì?Ã“IƒCƒ“ƒXƒ^ƒ“ƒX?¶?¬
            push @output_items, "{$link}";                     
        } else {
            # ˆê’v‚·‚é’l‚ª‚È‚©‚Á‚½?B
            push @output_items, "{0}";
        }
        
    } elsif ( is_unique_id ( $domain_key, $class_key, $attrs_attr_name  ) ){
        # ƒ†ƒj?[ƒNID‚Ì?ê?‡?B

        if ( scalar(@$ref_matched_lines) > 0 ) {
            # ˆê’v‚·‚é’l‚ª‚ ‚Á‚½?BŠÖ˜Aƒ|ƒCƒ“ƒ^‚Ì?‘‚«?o‚µ?B
            push @output_items
                , '(Escher_UniqueID_t)&'.$domain_key."_".$target_class_key
                    ."_ObjectPool_s[$ref_matched_lines->[0]]";
        } else {
            # ˆê’v‚·‚é’l‚ª‚È‚©‚Á‚½?B
            push @output_items, "(Escher_UniqueID_t)0";
        }

    } else {
        # ’Pˆê’l‚Ì?ê?‡?B

        if ( scalar(@$ref_matched_lines) > 0 ) {
            # ˆê’v‚·‚é’l‚ª‚ ‚Á‚½?BŠÖ˜Aƒ|ƒCƒ“ƒ^‚Ì?‘‚«?o‚µ?B
            push @output_items
                , '&'.$domain_key."_".$target_class_key
                    ."_ObjectPool_s[$ref_matched_lines->[0]]";
        } else {
            # ˆê’v‚·‚é’l‚ª‚È‚©‚Á‚½?B
            push @output_items, "0";
        }
    }

    return; 
}

#############################################################
# Žw’è‚³‚êƒNƒ‰ƒX‚É‚Â‚¢‚Ä?A
# csvƒtƒ@ƒCƒ‹‚É‘®?«‚ð•À‚×‚½‚Ì‚Æ“¯‚¶”Ô?†?‡‚É‚È‚ç‚ñ‚¾
# ‘®?«–¼‚Ì”z—ñ‚ð•Ô‚·?B
sub get_csv_attr_name_list {
    my ( $domain_key, $class_key ) = @_; 
    my %this_csv_tbl = %{ $::csv_tbl{$domain_key."_".$class_key} };
    my @csv_attr_name_list = ( );

    foreach my $attr ( keys %{ $this_csv_tbl{ATTR_SPEC} } ) {

        my $csv_attr_name = $this_csv_tbl{ATTR_SPEC}{$attr}{ATTR_NAME};
        my $csv_attr_number = $this_csv_tbl{ATTR_SPEC}{$attr}{ATTR_NUMBER};
        $csv_attr_name_list[$csv_attr_number] = $csv_attr_name;

        print "csv_attr: [$csv_attr_number]=  $csv_attr_name (class:$class_key)\n"  if $debug;
    }

    return @csv_attr_name_list;
}

#############################################################
# Žw’è‚³‚êƒNƒ‰ƒX‚ÌŽw’è‚³‚ê‚½‘®?«‚ªƒRƒŒƒNƒVƒ‡ƒ“‚ðŽ?‚Â‚Æ‚«‚Í?^?A
# ‚»‚¤‚Å‚È‚¯‚ê‚Î‹U‚ð•Ô‚·?B
sub has_collection {
    my ( $domain_key, $class_key, $attr_name ) = @_;
    return 1 if ( $::collection_info_tbl{$domain_key."_".$class_key}{$attr_name} eq 'C' );
    return 0;
}

#############################################################
# Žw’è‚³‚êƒNƒ‰ƒX‚ÌŽw’è‚³‚ê‚½‘®?«‚ªƒ†ƒj?[ƒNID‚Å‚ ‚é‚Æ‚«‚Í?^?A
# ‚»‚¤‚Å‚È‚¯‚ê‚Î‹U‚ð•Ô‚·?B
sub is_unique_id {
    my ( $domain_key, $class_key, $attr_name ) = @_;
    return 1 if ( $::collection_info_tbl{$domain_key."_".$class_key}{$attr_name} eq 'I' );
    return 0;
}

#############################################################
# Žw’è‚³‚êƒNƒ‰ƒX‚ÌŽw’è‚³‚ê‚½‘®?«‚ª’Pˆê’l‚Å‚ ‚é‚Æ‚«‚Í?^?A
# ‚»‚¤‚Å‚È‚¯‚ê‚Î‹U‚ð•Ô‚·?B
sub is_single {
    my ( $domain_key, $class_key, $attr_name ) = @_;
    return 1 if ( $::collection_info_tbl{$domain_key."_".$class_key}{$attr_name} eq 'S' );
    return 0;
}

#############################################################
#   “ú•t?î•ñ‚ð YYYY/MM/DD hh:mm:ss Œ`Ž®‚Ì•¶Žš—ñ‚É•ÏŠ·‚·‚é?B
#
#   time() ŠÖ?”‚ª•Ô‚·Œ`Ž®‚ÌŽž??‚ðˆø?”‚É‚Æ‚é?B
#   ˆø?”‚ª–³‚¢‚Æ‚«‚Í?AŒ»?Ý‚ÌŽž??‚ðŽg‚¤?B
#   ex. print &mydate(""),"\n";
#   

package MyDate;

sub today {
    $today = &mydate("");
}

sub now {
    $today = &mydate("");
}

sub mydate {
    my($mytime) = @_;
    if( $mytime eq "" ) {
        $mytime = time(); 
    }
  	my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($mytime);
  	$year += 1900;	
    $mon += 1;
  	$mydate = sprintf "%04d/%02d/%02d %02d:%02d:%02d",$year,$mon,$mday,$hour,$min,$sec;
}    

########################################
# end of script
1;
########################################
